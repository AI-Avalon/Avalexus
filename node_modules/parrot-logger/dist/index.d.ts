import { DeepRequired } from 'utility-types';
export declare type LoggerType = 'INFO' | 'WARN' | 'ERROR' | 'DEBUG';
export interface ColorOptions {
    background: string;
    backgroundText: string;
    text: string;
}
export interface ConsoleOptions {
    logging?: boolean;
    type?: Partial<Record<LoggerType, boolean>>;
    color?: Partial<Record<LoggerType, Partial<ColorOptions>>>;
}
export interface FileLogging {
    logging?: boolean;
    filePath?: string;
    type?: Partial<Record<LoggerType, boolean>>;
}
export interface LoggerOptions {
    timestamp?: string;
    console?: ConsoleOptions;
    file?: FileLogging;
}
export declare class Logger {
    #private;
    readonly options: DeepRequired<LoggerOptions>;
    constructor(options?: LoggerOptions);
    info(data: any): Logger;
    warn(data: any): Logger;
    error(data: any): Logger;
    debug(data: any): Logger;
    private write;
    private flatten;
    private isObject;
    private formatData;
}
