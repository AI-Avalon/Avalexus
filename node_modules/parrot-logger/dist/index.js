"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _writeStream;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const util_1 = require("util");
const fs_1 = require("fs");
const os_1 = require("os");
const deepmerge_1 = __importDefault(require("deepmerge"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const dayjs_1 = __importDefault(require("dayjs"));
const defaultOptions = {
    timestamp: 'YYYY/MM/DD HH:mm:ss.SSS',
    console: {
        logging: true,
        type: {
            INFO: true,
            WARN: true,
            ERROR: true,
            DEBUG: false
        },
        color: {
            INFO: {
                text: '#fff',
                background: '#1565c0',
                backgroundText: '#cccccc'
            },
            WARN: {
                text: '#ffb04c',
                background: '#ff833a',
                backgroundText: '#cccccc'
            },
            ERROR: {
                text: '#f44336',
                background: '#f44336',
                backgroundText: '#cccccc'
            },
            DEBUG: {
                text: '#9e9e9e',
                background: '#707070',
                backgroundText: '#cccccc'
            }
        }
    },
    file: {
        logging: false,
        filePath: path_1.default.join(path_1.default.resolve(process.cwd()), 'program.log'),
        type: {
            INFO: true,
            WARN: true,
            ERROR: true,
            DEBUG: true
        }
    }
};
class Logger {
    constructor(options = {}) {
        _writeStream.set(this, void 0);
        this.options = deepmerge_1.default(defaultOptions, options);
        __classPrivateFieldSet(this, _writeStream, this.options.file.logging
            ? fs_1.createWriteStream(this.options.file.filePath, { flags: 'a' })
            : null);
    }
    info(data) {
        return this.write('INFO', data);
    }
    warn(data) {
        return this.write('WARN', data);
    }
    error(data) {
        return this.write('ERROR', data);
    }
    debug(data) {
        return this.write('DEBUG', data);
    }
    write(type, data) {
        const timestamp = dayjs_1.default().format(this.options.timestamp);
        if (this.options.console.logging && this.options.console.type[type]) {
            console.log(this.formatData(timestamp, this.flatten(data), this.options.console.color[type], this.isObject(data)));
        }
        if (this.options.file.logging && this.options.file.type[type] && __classPrivateFieldGet(this, _writeStream)) {
            __classPrivateFieldGet(this, _writeStream).write(`[${timestamp}] [${type}] ${this.flatten(data, false) + os_1.EOL || '\n'}`, error => {
                if (error)
                    console.error(error);
            });
        }
        return this;
    }
    flatten(data, color = true) {
        if (typeof data === 'string')
            return data;
        if (typeof data === 'object') {
            if (data instanceof Error)
                return data.stack || data.message;
            return util_1.inspect(data, { depth: Number(Array.isArray(data)), colors: color });
        }
        return String(data);
    }
    isObject(value) {
        if (value instanceof Error)
            return false;
        return typeof value === 'object';
    }
    formatData(timestamp, data, option, noColor = false) {
        return `${chalk_1.default.bgHex(option.background).hex(option.backgroundText)(`[${timestamp}]`)} ${noColor ? data : chalk_1.default.hex(option.text)(data)}`;
    }
}
exports.Logger = Logger;
_writeStream = new WeakMap();
