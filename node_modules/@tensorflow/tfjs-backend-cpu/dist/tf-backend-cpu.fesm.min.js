/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import{util as e,kernel_impls as t,KernelBackend as n,DataStorage as a,engine as s,env as o,backend_util as r,buffer as i,Abs as d,Complex as c,Identity as l,Real as p,Cast as u,Add as h,Ceil as f,Exp as m,Expm1 as k,Floor as I,Greater as g,Less as b,Log as y,Maximum as N,Minimum as x,Multiply as T,Neg as S,NotEqual as F,Transpose as v,upcastType as M,Prod as A,Rsqrt as w,slice_util as z,Slice as D,SquaredDifference as W,Sub as H,TensorBuffer as E,registerBackend as C,Elu as P,LeakyRelu as R,Prelu as $,Relu as O,Relu6 as V,Sigmoid as _,Reshape as B,BatchMatMul as L,_FusedMatMul as q,Acos as G,Acosh as U,AddN as Z,All as j,Any as K,ArgMax as Y,ArgMin as J,Asin as Q,Asinh as X,Atan as ee,Atan2 as te,Atanh as ne,AvgPool as ae,AvgPool3D as se,AvgPool3DGrad as oe,AvgPoolGrad as re,FusedBatchNorm as ie,BatchToSpaceND as de,Bincount as ce,ClipByValue as le,ComplexAbs as pe,Imag as ue,Concat as he,Conv2D as fe,Conv2DBackpropFilter as me,Conv2DBackpropInput as ke,Conv3D as Ie,Conv3DBackpropFilterV2 as ge,Conv3DBackpropInputV2 as be,Cos as ye,Cosh as Ne,CropAndResize as xe,Cumsum as Te,DenseBincount as Se,DepthToSpace as Fe,DepthwiseConv2dNative as ve,DepthwiseConv2dNativeBackpropFilter as Me,DepthwiseConv2dNativeBackpropInput as Ae,Diag as we,Dilation2D as ze,Dilation2DBackpropFilter as De,Dilation2DBackpropInput as We,Sum as He,Einsum as Ee,EluGrad as Ce,Equal as Pe,Erf as Re,ExpandDims as $e,RealDiv as Oe,FFT as Ve,Fill as _e,FlipLeftRight as Be,FloorDiv as Le,FusedConv2D as qe,FusedDepthwiseConv2D as Ge,GatherNd as Ue,GatherV2 as Ze,GreaterEqual as je,IFFT as Ke,IsFinite as Ye,IsInf as Je,IsNan as Qe,LessEqual as Xe,LinSpace as et,Log1p as tt,LogicalAnd as nt,LogicalNot as at,LogicalOr as st,LRN as ot,LRNGrad as rt,Max as it,MaxPool as dt,MaxPool3D as ct,MaxPool3DGrad as lt,MaxPoolGrad as pt,MaxPoolWithArgmax as ut,Mean as ht,Min as ft,MirrorPad as mt,Mod as kt,Softmax as It,Multinomial as gt,NonMaxSuppressionV3 as bt,NonMaxSuppressionV4 as yt,NonMaxSuppressionV5 as Nt,OneHot as xt,ZerosLike as Tt,OnesLike as St,Pack as Ft,PadV2 as vt,Pow as Mt,Range as At,Reciprocal as wt,ResizeBilinear as zt,ResizeBilinearGrad as Dt,ResizeNearestNeighbor as Wt,ResizeNearestNeighborGrad as Ht,Reverse as Et,RotateWithOffset as Ct,Round as Pt,ScatterNd as Rt,Select as $t,Selu as Ot,Sign as Vt,Sin as _t,Sinh as Bt,Softplus as Lt,SpaceToBatchND as qt,SparseReshape as Gt,SparseToDense as Ut,SplitV as Zt,Sqrt as jt,Square as Kt,Step as Yt,StridedSlice as Jt,Tan as Qt,Tanh as Xt,Tile as en,TopK as tn,Transform as nn,Unique as an,Unpack as sn,UnsortedSegmentSum as on,registerKernel as rn}from"@tensorflow/tfjs-core";import{alea as dn}from"seedrandom";function cn(t,n){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&e.assert("complex64"!==t.dtype,()=>n+" does not support complex64 tensors in the CPU backend.")})}const ln=t.whereImpl;class pn extends n{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new a(this,s())}nextDataId(){return pn.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,o().get("IS_NODE")&&r.warn("\n============================\nHi there ðŸ‘‹. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:n,refCount:1}),a}makeTensorInfo(t,n,a){let s;if("string"===n&&null!=a&&a.length>0&&e.isString(a[0])){const o=a.map(t=>e.encodeString(t));s=this.write(o,t,n)}else s=this.write(a,t,n);return{dataId:s,shape:t,dtype:n}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,a,s){this.data.set(e,{values:t,dtype:a,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return r.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(t){const n=this.readSync(t.dataId);let a=n;if("string"===t.dtype)try{a=n.map(t=>e.decodeString(t))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return i(t.shape,t.dtype,a)}makeOutput(e,t,n){const a=this.write(e,t,n);return s().makeTensorFromDataId(a,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(t){const n=e.now();t();return{kernelMs:e.now()-n}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){cn([e],"where");const t=this.readSync(e.dataId);return ln(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function un(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}pn.nextDataId=0;const hn={kernelName:d,backendName:"cpu",kernelFunc:t=>{const{x:n}=t.inputs,a=t.backend;cn(n,"abs");let s=new Float32Array(e.sizeFromShape(n.shape));return s=un(a.data.get(n.dataId).values),a.makeOutput(s,n.shape,"float32")}};function fn(t){return(n,a,s,o,i)=>{const d=r.assertAndGetBroadcastShape(n,a),c=d.length,l=e.computeStrides(d),p=e.sizeFromShape(d),u=e.getTypedArrayFromDType(i,p),h=n.length,f=a.length,m=e.computeStrides(n),k=e.computeStrides(a),I=r.getBroadcastDims(n,d),g=r.getBroadcastDims(a,d);if(I.length+g.length===0)for(let e=0;e<u.length;++e)u[e]=t(s[e%s.length],o[e%o.length]);else for(let n=0;n<u.length;++n){const a=e.indexToLoc(n,c,l),r=a.slice(-h);I.forEach(e=>r[e]=0);const i=e.locToIndex(r,h,m),d=a.slice(-f);g.forEach(e=>d[e]=0);const p=e.locToIndex(d,f,k);u[n]=t(s[i],o[p])}return[u,d]}}function mn(e){const{inputs:t,backend:n}=e,{real:a,imag:s}=t,o=n.data.get(a.dataId).values,r=n.data.get(s.dataId).values,i=n.makeTensorInfo(a.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(a.shape,"float32",o),imag:n.makeTensorInfo(s.shape,"float32",r)},i}const kn={kernelName:c,backendName:"cpu",kernelFunc:mn};function In(t,n,a="float32"){if("complex64"===a){return mn({inputs:{real:In(t,n,"float32"),imag:In(t,n,"float32")},backend:t})}const s=e.makeZerosTypedArray(e.sizeFromShape(n),a);return t.makeTensorInfo(n,a,s)}function gn(e){const{inputs:t,backend:n}=e,{x:a}=t;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const bn={kernelName:l,backendName:"cpu",kernelFunc:gn};function yn(e){const{inputs:t,backend:n}=e,{input:a}=t,s=n.data.get(a.dataId).complexTensorInfos.real,o=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,o)}const Nn={kernelName:p,backendName:"cpu",kernelFunc:yn};function xn(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{dtype:r}=s;if("complex64"===r){if("complex64"===o.dtype)return gn({inputs:{x:o},backend:a});const e=In(a,o.shape,o.dtype),t=xn({inputs:{x:o},backend:a,attrs:{dtype:"float32"}}),n=mn({inputs:{real:t,imag:e},backend:a});return a.disposeIntermediateTensorInfo(e),a.disposeIntermediateTensorInfo(t),n}if("complex64"===o.dtype){const e=yn({inputs:{input:o},backend:a}),t=xn({inputs:{x:e},backend:a,attrs:{dtype:r}});return a.disposeIntermediateTensorInfo(e),t}if(!e.hasEncodingLoss(o.dtype,r)){const e=gn({inputs:{x:o},backend:a});return{dataId:e.dataId,shape:e.shape,dtype:r}}if("int32"===r){const e=a.data.get(o.dataId).values,t=Int32Array.from(e);return a.makeTensorInfo(o.shape,"int32",t)}if("bool"===r){const t=a.data.get(o.dataId).values,n=e.toTypedArray([0],o.dtype),[s,r]=fn((e,t)=>e!==t?1:0)(o.shape,[],t,n,"bool");return a.makeTensorInfo(r,"bool",s)}throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${r}`)}const Tn={kernelName:u,backendName:"cpu",kernelFunc:xn};function Sn(e,t,n,a){return null==n?({inputs:n,backend:s})=>{const{a:o,b:r}=n,i=s;cn([o,r],e);const d=i.data.get(o.dataId).values,c=i.data.get(r.dataId).values,l=a||o.dtype,[p,u]=t(o.shape,r.shape,d,c,l);return i.makeTensorInfo(u,l,p)}:({inputs:e,backend:s})=>{const{a:o,b:r}=e,i=s;if("complex64"===o.dtype||"complex64"===r.dtype){const e=xn({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),a=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,d=i.data.get(a.dataId).values,c=i.data.get(s.dataId).values,l=xn({inputs:{x:r},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(l.dataId),u=p.complexTensorInfos.real,h=p.complexTensorInfos.imag,f=i.data.get(u.dataId).values,m=i.data.get(h.dataId).values,[k,I,g]=n(o.shape,r.shape,d,c,f,m),b=i.makeTensorInfo(g,"float32",k),y=i.makeTensorInfo(g,"float32",I),N=mn({inputs:{real:b,imag:y},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(l),i.disposeIntermediateTensorInfo(b),i.disposeIntermediateTensorInfo(y),N}{const e=i.data.get(o.dataId).values,n=i.data.get(r.dataId).values,s=a||o.dtype,[d,c]=t(o.shape,r.shape,e,n,s);return i.makeTensorInfo(c,s,d)}}}function Fn(t){return(n,a,s,o,i,d)=>{const c=r.assertAndGetBroadcastShape(n,a),l=e.sizeFromShape(c),p=c.length,u=e.computeStrides(c),h=e.getTypedArrayFromDType("float32",l),f=e.getTypedArrayFromDType("float32",l),m=r.getBroadcastDims(n,c),k=r.getBroadcastDims(a,c),I=r.mergeRealAndImagArrays(s,o),g=r.mergeRealAndImagArrays(i,d),b=n.length,y=e.computeStrides(n),N=a.length,x=e.computeStrides(a);if(m.length+k.length===0)for(let e=0;e<h.length;e++){const n=e%I.length,a=e%g.length,s=t(I[2*n],I[2*n+1],g[2*a],g[2*a+1]);h[e]=s.real,f[e]=s.imag}else for(let n=0;n<h.length;n++){const a=e.indexToLoc(n,p,u),s=a.slice(-b);m.forEach(e=>s[e]=0);const o=e.locToIndex(s,b,y),r=a.slice(-N);k.forEach(e=>r[e]=0);const i=e.locToIndex(r,N,x),d=t(I[2*o],I[2*o+1],g[2*i],g[2*i+1]);h[n]=d.real,f[n]=d.imag}return[h,f,c]}}const vn=fn((e,t)=>e+t),Mn=Sn(h,vn,Fn((e,t,n,a)=>({real:e+n,imag:t+a}))),An={kernelName:h,backendName:"cpu",kernelFunc:Mn};function wn(t,n,a,s,o){const r=e.sizeFromShape(s),i=e.makeZerosTypedArray(o,a);for(let e=0;e<t.length;e++){const a=t[e];if(a<0)throw new Error("Input x must be non-negative!");a>=o||(i[a]+=r>0?n[e]:1)}return i}function zn(e,t,n,a=!1){const s=e.shape[0],o=e.shape[1],r=i([s,n],t.dtype);for(let i=0;i<s;i++)for(let s=0;s<o;s++){const o=e.get(i,s);if(o<0)throw new Error("Input x must be non-negative!");o>=n||(a?r.set(1,i,o):t.size>0?r.set(r.get(i,o)+t.get(i,s),i,o):r.set(r.get(i,o)+1,i,o))}return r}function Dn(t){return(n,a,s)=>{const o=e.getTypedArrayFromDType(a,n.length);for(let e=0;e<n.length;++e)o[e]=t(n[e],s);return o}}function Wn(t,n,a){return({inputs:s,attrs:o,backend:r})=>{const{x:i}=s;if(cn(i,t),"string"===i.dtype||"string"===a)throw new Error("unaryKernelFunc does not support string input/output");const d=r,c=d.data.get(i.dataId).values,l=e.sizeFromShape(i.shape),p=a||i.dtype,u=e.getArrayFromDType(p,l);for(let e=0;e<l;++e)u[e]=n(c[e],o);return d.makeTensorInfo(i.shape,p,u)}}function Hn(e,t,n){return({inputs:a,attrs:s,backend:o})=>{const{x:r}=a;if(cn(r,e),"string"===r.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=o,d=i.data.get(r.dataId).values,c=n||r.dtype,l=t(d,c,s);return i.makeTensorInfo(r.shape,c,l)}}const En=Dn(e=>Math.ceil(e)),Cn={kernelName:f,backendName:"cpu",kernelFunc:Hn(f,En)};function Pn(t,n,a,s){const o=e.getArrayFromDType(a,e.sizeFromShape(n));if(s&&"string"!==a){let n=0;t.forEach(t=>{const a=e.sizeFromShape(t.shape);o.set(t.vals,n),n+=a})}else{let e=0;t.forEach(t=>{const s="string"===a?r.fromUint8ToStringArray(t.vals):t.vals;let i=0;for(let a=0;a<t.shape[0];++a){const r=a*n[1]+e;for(let e=0;e<t.shape[1];++e)o[r+e]=s[i++]}e+=t.shape[1]})}return o}const Rn=Dn(e=>Math.exp(e)),$n=Hn(m,Rn),On={kernelName:m,backendName:"cpu",kernelFunc:$n},Vn=Dn(e=>Math.expm1(e)),_n={kernelName:k,backendName:"cpu",kernelFunc:Hn(k,Vn)},Bn=Dn(e=>Math.floor(e)),Ln={kernelName:I,backendName:"cpu",kernelFunc:Hn(I,Bn)};function qn(e,t,n){const a=i(n,e.dtype);for(let n=0;n<a.size;++n){const s=a.indexToLoc(n).slice(),o=s[0],r=s[2],i=t.locToIndex([o,r]);s[2]=t.values[i];const d=e.locToIndex(s);a.values[n]=e.values[d]}return a}const Gn=fn((e,t)=>e>t?1:0),Un={kernelName:g,backendName:"cpu",kernelFunc:Sn(g,Gn,null,"bool")},Zn=fn((e,t)=>e<t?1:0),jn={kernelName:b,backendName:"cpu",kernelFunc:Sn(b,Zn,null,"bool")};function Kn(t,n,a){const s=(n-t)/(a-1),o=e.makeZerosTypedArray(a,"float32");o[0]=t;for(let e=1;e<o.length;e++)o[e]=o[e-1]+s;return o}const Yn=Dn(e=>Math.log(e)),Jn={kernelName:y,backendName:"cpu",kernelFunc:Hn(y,Yn)};function Qn(t,n,a,s){const o=e.getTypedArrayFromDType(s,e.sizeFromShape(a));for(let e=0;e<o.length;++e){const a=e*n;let s=t[a];for(let e=0;e<n;++e){const n=t[a+e];n>s&&(s=n)}o[e]=s}return o}const Xn=fn((e,t)=>Math.max(e,t)),ea={kernelName:N,backendName:"cpu",kernelFunc:Sn(N,Xn)},ta=fn((e,t)=>Math.min(e,t)),na={kernelName:x,backendName:"cpu",kernelFunc:Sn(x,ta)},aa=fn((e,t)=>e*t),sa=Fn((e,t,n,a)=>({real:e*n-t*a,imag:e*a+t*n})),oa=Sn(T,aa,sa),ra={kernelName:T,backendName:"cpu",kernelFunc:oa};function ia(t,n,a){const s=e.createScalarValue(-1,a);return aa([],n,s,t,a)}const da={kernelName:S,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t;cn(a,"neg");const s=n.data.get(a.dataId).values,[o,r]=ia(s,a.shape,a.dtype);return n.makeTensorInfo(r,a.dtype,o)}},ca=fn((e,t)=>e!==t?1:0),la={kernelName:F,backendName:"cpu",kernelFunc:Sn(F,ca,null,"bool")};function pa(t,n,a,s,o){const r=n.length,i=e.sizeFromShape(n),d=e.computeStrides(n),c=e.computeStrides(o),l=e.getTypedArrayFromDType(a,e.sizeFromShape(o));for(let n=0;n<i;++n){const a=e.indexToLoc(n,r,d),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[s[e]];l[e.locToIndex(o,r,c)]=t[n]}return l}function ua(e){const{inputs:t,attrs:n,backend:a}=e,{x:s}=t,{perm:o}=n;cn(s,"transpose");const r=s.shape.length,i=new Array(r);for(let e=0;e<i.length;e++)i[e]=s.shape[o[e]];const d=pa(a.data.get(s.dataId).values,s.shape,s.dtype,o,i);return{dataId:a.write(d,i,s.dtype),shape:i,dtype:s.dtype}}const ha={kernelName:v,backendName:"cpu",kernelFunc:ua};function fa(t,n,a,s){const[o,i]=r.computeOutAndReduceShapes(t,s),d=M(n,"int32"),c=e.makeZerosTypedArray(e.sizeFromShape(o),d),l=e.sizeFromShape(i);for(let e=0;e<c.length;++e){const t=e*l;let n=1;for(let e=0;e<l;++e)n*=a[t+e];c[e]=n}return{outVals:c,outShape:o,outDtype:d}}const ma={kernelName:A,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{axis:i,keepDims:d}=s;cn(o,"prod");const c=o.shape.length,l=e.parseAxisParam(i,o.shape),p=r.getAxesPermutation(l,c);let u=l,h=o;const f=[];null!=p&&(h=ua({inputs:{x:o},backend:a,attrs:{perm:p}}),f.push(h),u=r.getInnerMostAxes(u.length,c));const m=a.data.get(h.dataId).values,{outVals:k,outShape:I,outDtype:g}=fa(h.shape,h.dtype,m,u);let b=I;return d&&(b=r.expandShapeToKeepDim(I,l)),f.forEach(e=>a.disposeIntermediateTensorInfo(e)),a.makeTensorInfo(b,g,k)}};function ka(t,n,a,s){if(t===n||t<n&&a<0||n<t&&a>1)return e.makeZerosTypedArray(0,s);const o=Math.abs(Math.ceil((n-t)/a)),r=e.makeZerosTypedArray(o,s);n<t&&1===a&&(a=-1),r[0]=t;for(let e=1;e<r.length;e++)r[e]=r[e-1]+a;return r}const Ia=Dn(e=>1/Math.sqrt(e)),ga={kernelName:w,backendName:"cpu",kernelFunc:Hn(w,Ia)};function ba(t,n,a,s,o){const d=z.isSliceContinous(s,n,a),c=e.sizeFromShape(a),l=e.computeStrides(s);if(d){const e=z.computeFlatOffset(n,l);return"string"===o?t.slice(e,e+c):t.subarray(e,e+c)}const p="string"===o?r.fromUint8ToStringArray(t):t,u=i(s,o,p),h=i(a,o);for(let e=0;e<h.size;++e){const t=h.indexToLoc(e),a=t.map((e,t)=>e+n[t]);h.set(u.get(...a),...t)}return"string"===o?r.fromStringArrayToUint8(h.values):h.values}function ya(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{begin:o,size:r}=a;cn(s,"slice");const[i,d]=z.parseSliceParams(s,o,r);z.assertParamsValid(s,i,d);const c=ba(n.data.get(s.dataId).values,i,d,s.shape,s.dtype);return n.makeTensorInfo(d,s.dtype,c)}const Na={kernelName:D,backendName:"cpu",kernelFunc:ya};function xa(t,n,a,s,o){const r=e.sizeFromShape(s),i=n[0],d=o.length,c=[];let l=1,p=-1;for(let e=0;e<d;++e){const t=o[e];if(-1===t){if(-1!==p)throw new Error(`only one output dimension may be -1, not both ${p} and ${e}`);p=e,c.push(1)}else{if(t<0)throw new Error(`size ${e} must be non-negative, not ${t}`);l*=t,c.push(t)}}if(-1!==p){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(r/l);if(l*e!==r)throw new Error(`Input to reshape is a SparseTensor with ${r}\n          dense values, but the requested shape requires a multiple of ${l}. inputShape=${s} outputShape= ${c}`);c[p]=e}const u=e.sizeFromShape(c);if(u!==r)throw new Error(`Input to reshape is a tensor with ${r} dense values, but the requested shape has ${u}. inputShape=${s} outputShape=${c}`);const h=s.length,f=[];if(h>0){f[h-1]=1;for(let e=h-2;e>=0;--e)f[e]=f[e+1]*s[e+1]}const m=[];if(d>0){m[d-1]=1;for(let e=d-2;e>=0;--e)m[e]=m[e+1]*c[e+1]}const k=e.getArrayFromDType(a,i*d);for(let e=0;e<i;++e){let n=0;for(let a=0;a<h;++a)n+=t[e*h+a]*f[a];for(let t=0;t<d;++t)k[e*d+t]=Math.trunc(n/m[t]),n%=m[t]}return[k,[i,d],c]}const Ta=fn((e,t)=>{const n=e-t;return n*n}),Sa={kernelName:W,backendName:"cpu",kernelFunc:Sn(W,Ta)};function Fa(e,t,n,a){const s=i(e,t.dtype);for(let e=0;e<s.size;e++){const o=s.indexToLoc(e),r=new Array(o.length);for(let e=0;e<r.length;e++)r[e]=o[e]*n[e]+a[e];s.set(t.get(...r),...o)}return s}const va=fn((e,t)=>e-t),Ma=Sn(H,va,Fn((e,t,n,a)=>({real:e-n,imag:t-a}))),Aa={kernelName:H,backendName:"cpu",kernelFunc:Ma};function wa(e,t){const n=new Array(e.rank);for(let a=0;a<n.length;a++)n[a]=e.shape[a]*t[a];const a=i(n,e.dtype);for(let t=0;t<a.values.length;++t){const n=a.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const o=e.locToIndex(s);a.values[t]=e.values[o]}return a}function za(t,n,a,s,o){const r=n[n.length-1],[d,c]=[t.length/r,r],l=e.getTypedArrayFromDType(a,d*s),p=e.getTypedArrayFromDType("int32",d*s);for(let e=0;e<d;e++){const n=e*c,a=t.subarray(n,n+c),o=[];for(let e=0;e<a.length;e++)o.push({value:a[e],index:e});o.sort((e,t)=>t.value-e.value);const r=e*s,i=l.subarray(r,r+s),d=p.subarray(r,r+s);for(let e=0;e<s;e++)i[e]=o[e].value,d[e]=o[e].index}const u=n.slice();return u[u.length-1]=s,[i(u,a,l),i(u,"int32",p)]}function Da(t,n,a,s){const o=e.parseAxisParam(n,a)[0],r=[1,a[0],1];for(let e=0;e<o;e++)r[0]*=a[e];r[1]=a[o];for(let e=o+1;e<a.length;e++)r[2]*=a[e];const i={},d=new Int32Array(a[o]),c=new E(r,s,t),l=[],p=1===r[0]&&1===r[2];for(let e=0;e<a[o];e++){let n;if(p)n=t[e].toString();else{const t=[];for(let n=0;n<r[0];n++)for(let a=0;a<r[2];a++)t.push(c.get(n,e,a));n=t.join(",")}if(void 0!==i[n])d[e]=i[n];else{const t=Object.keys(i).length;i[n]=t,d[e]=t,l.push(e)}}const u=r.slice();u[1]=Object.keys(i).length;const h=new E(u,s);l.forEach((e,t)=>{for(let n=0;n<r[0];n++)for(let a=0;a<r[2];a++)h.set(c.get(n,e,a),n,t,a)});const f=a.slice();return f[o]=u[1],{outputValues:h.values,outputShape:f,indices:d}}var Wa=Object.freeze({__proto__:null,simpleAbsImpl:un,addImpl:vn,bincountImpl:wn,bincountReduceImpl:zn,ceilImpl:En,concatImpl:Pn,expImpl:Rn,expm1Impl:Vn,floorImpl:Bn,gatherV2Impl:qn,greaterImpl:Gn,lessImpl:Zn,linSpaceImpl:Kn,logImpl:Yn,maxImpl:Qn,maximumImpl:Xn,minimumImpl:ta,multiplyImpl:aa,negImpl:ia,notEqualImpl:ca,prodImpl:fa,rangeImpl:ka,rsqrtImpl:Ia,sliceImpl:ba,sparseReshapeImpl:xa,squaredDifferenceImpl:Ta,stridedSliceImpl:Fa,subImpl:va,tileImpl:wa,topKImpl:za,transposeImpl:pa,uniqueImpl:Da});const Ha="3.5.0";C("cpu",()=>new pn,1);const Ea=Wn(P,e=>e>=0?e:Math.exp(e)-1),Ca={kernelName:P,backendName:"cpu",kernelFunc:Ea};function Pa(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{alpha:r}=s;cn([o],"leakyRelu");const i=e.sizeFromShape(o.shape),d=a.data.get(o.dataId).values,c=e.getTypedArrayFromDType("float32",i);for(let e=0;e<d.length;e++)c[e]=d[e]<0?r*d[e]:d[e];return a.makeTensorInfo(o.shape,"float32",c)}const Ra={kernelName:R,backendName:"cpu",kernelFunc:Pa},$a=fn((e,t)=>e<0?t*e:e);function Oa(e){const{inputs:t,backend:n}=e,{x:a,alpha:s}=t;cn([a,s],"prelu");const o=n.data.get(a.dataId).values,r=n.data.get(s.dataId).values,[i,d]=$a(a.shape,s.shape,o,r,a.dtype);return n.makeTensorInfo(d,a.dtype,i)}const Va={kernelName:$,backendName:"cpu",kernelFunc:Oa},_a=Wn(O,e=>Math.max(0,e)),Ba={kernelName:O,backendName:"cpu",kernelFunc:_a},La=Wn(V,e=>Math.min(Math.max(0,e),6)),qa={kernelName:V,backendName:"cpu",kernelFunc:La},Ga=Wn(_,e=>1/(1+Math.exp(-e))),Ua={kernelName:_,backendName:"cpu",kernelFunc:Ga};function Za(e,t,n,a,s){if("linear"===n)return gn({inputs:{x:t},backend:e});if("relu"===n)return _a({inputs:{x:t},backend:e});if("elu"===n)return Ea({inputs:{x:t},backend:e});if("relu6"===n)return La({inputs:{x:t},backend:e});if("prelu"===n)return Oa({inputs:{x:t,alpha:a},backend:e});if("leakyrelu"===n)return Pa({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return Ga({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function ja(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{shape:r}=s,i=e.sizeFromShape(o.shape),d=e.inferFromImplicitShape(r,i),c=e.sizeFromShape(d);e.assert(i===c,()=>`The new shape (${d}) has ${c} elements and the old shape (${o.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),a.incRef(o.dataId);const l=a.data.get(o.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=d,t.shape=d}return{dataId:o.dataId,shape:d,dtype:o.dtype}}const Ka={kernelName:B,backendName:"cpu",kernelFunc:ja};function Ya(t){const{inputs:n,backend:a,attrs:s}=t,{a:o,b:r}=n,{transposeA:d,transposeB:c}=s;cn([o,r],"matMul");const l=o.shape.length,p=r.shape.length,u=d?o.shape[l-2]:o.shape[l-1],h=c?r.shape[p-1]:r.shape[p-2],f=d?o.shape[l-1]:o.shape[l-2],m=c?r.shape[p-2]:r.shape[p-1],k=o.shape.slice(0,-2),I=r.shape.slice(0,-2),g=e.sizeFromShape(k),b=e.sizeFromShape(I),y=g===b||1===g||1===b;e.assert(l>=2&&p>=2&&y,()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${k}) and (${I}).`);const N=(g>b?o.shape.slice(0,-2):r.shape.slice(0,-2)).concat([f,m]);e.assert(u===h,()=>`Error in matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${o.shape} and ${r.shape} and transposeA=${d} and transposeB=${c} must match.`);const x=c?[b,m,h]:[b,h,m],T=ja({inputs:{x:o},backend:a,attrs:{shape:d?[g,u,f]:[g,f,u]}}),S=ja({inputs:{x:r},backend:a,attrs:{shape:x}}),F=d?T.shape[1]:T.shape[2],v=d?T.shape[2]:T.shape[1],M=c?S.shape[1]:S.shape[2],A=Math.max(g,b),w=a.data.get(T.dataId).values,z=a.data.get(S.dataId).values,D=e.computeStrides(T.shape),W=e.computeStrides(S.shape),[H,E,C]=d?[D[0],1,D[1]]:[D[0],D[1],1],[P,R,$]=c?[1,W[1],W[0]]:[W[1],1,W[0]],O=v*M,V=i([A,v,M],T.dtype),_=V.values,B=a.blockSize;for(let e=0;e<A;e++)for(let t=0;t<v;t+=B)for(let n=0;n<M;n+=B)for(let a=0;a<F;a+=B){const s=Math.min(t+B,v),o=Math.min(n+B,M),r=Math.min(a+B,F);for(let i=t;i<s;i++)for(let t=n;t<o;t++){let n=0;for(let s=a;s<r;s++){const a=Math.min(e,g-1)*H,o=Math.min(e,b-1)*$;n+=w[a+i*E+s*C]*z[s*P+t*R+o]}_[e*O+(i*M+t)]+=n}}return a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(S),a.makeTensorInfo(N,V.dtype,V.values)}const Ja={kernelName:L,backendName:"cpu",kernelFunc:Ya};const Qa={kernelName:q,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:s,b:o,bias:r,preluActivationWeights:i}=t,{transposeA:d,transposeB:c,activation:l,leakyreluAlpha:p}=a;let u,h,f;const m=[];u=Ya({inputs:{a:s,b:o},attrs:{transposeA:d,transposeB:c},backend:n}),r&&(h=Mn({inputs:{a:u,b:r},backend:n}),m.push(u),u=h),l&&(f=Za(n,u,l,i,p),m.push(u),u=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return u}},Xa={kernelName:G,backendName:"cpu",kernelFunc:Wn(G,e=>Math.acos(e))},es={kernelName:U,backendName:"cpu",kernelFunc:Wn(U,e=>Math.acosh(e))};const ts={kernelName:Z,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,a=t;cn(t,"addN");const s=a.map(e=>n.data.get(e.dataId).values),o=i(a[0].shape,a[0].dtype),r=o.values;for(let e=0;e<a.length;e++){const t=s[e];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.makeTensorInfo(o.shape,o.dtype,o.values)}};const ns={kernelName:j,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{axis:i,keepDims:d}=s;cn(o,"all");const c=e.parseAxisParam(i,o.shape);let l=c;const p=r.getAxesPermutation(l,o.shape.length);let u=o;null!=p&&(u=ua({inputs:{x:o},backend:a,attrs:{perm:p}}),l=r.getInnerMostAxes(l.length,o.shape.length)),r.assertAxesAreInnerMostDims("all",l,u.shape.length);const[h,f]=r.computeOutAndReduceShapes(u.shape,l),m=e.sizeFromShape(f),k=e.makeZerosTypedArray(e.sizeFromShape(h),u.dtype),I=a.data.get(u.dataId).values;for(let e=0;e<k.length;++e){const t=e*m;let n=I[t];for(let e=0;e<m;++e){const a=I[t+e];n=n&&a}k[e]=n}null!=p&&a.disposeIntermediateTensorInfo(u);const g=a.makeTensorInfo(h,u.dtype,k);if(d){const e=ja({inputs:{x:g},backend:a,attrs:{shape:r.expandShapeToKeepDim(h,c)}});return a.disposeIntermediateTensorInfo(g),e}return g}};const as={kernelName:K,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{axis:i,keepDims:d}=s;cn(o,"any");const c=e.parseAxisParam(i,o.shape);let l=c;const p=r.getAxesPermutation(l,o.shape.length);let u=o;null!=p&&(u=ua({inputs:{x:o},backend:a,attrs:{perm:p}}),l=r.getInnerMostAxes(l.length,o.shape.length)),r.assertAxesAreInnerMostDims("any",l,u.shape.length);const[h,f]=r.computeOutAndReduceShapes(u.shape,l),m=e.sizeFromShape(f),k=e.makeZerosTypedArray(e.sizeFromShape(h),u.dtype),I=a.data.get(u.dataId).values;for(let e=0;e<k.length;++e){const t=e*m;let n=I[t];for(let e=0;e<m;++e){const a=I[t+e];n=n||a}k[e]=n}null!=p&&a.disposeIntermediateTensorInfo(u);const g=a.makeTensorInfo(h,u.dtype,k);if(d){const e=ja({inputs:{x:g},backend:a,attrs:{shape:r.expandShapeToKeepDim(h,c)}});return a.disposeIntermediateTensorInfo(g),e}return g}};const ss={kernelName:Y,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{axis:i}=s;cn(o,"argMax");let d=e.parseAxisParam(i,o.shape);const c=r.getAxesPermutation(d,o.shape.length);let l=o;const p=[];null!=c&&(l=ua({inputs:{x:o},backend:a,attrs:{perm:c}}),p.push(l),d=r.getInnerMostAxes(d.length,l.shape.length)),d=[d[0]],r.assertAxesAreInnerMostDims("argMax",d,l.shape.length);const[u,h]=r.computeOutAndReduceShapes(l.shape,d),f=e.sizeFromShape(u),m=e.makeZerosTypedArray(f,"int32"),k=e.sizeFromShape(h),I=a.data.get(l.dataId).values;for(let e=0;e<m.length;++e){const t=e*k;let n=I[t],a=0;for(let e=0;e<k;++e){const s=I[t+e];s>n&&(n=s,a=e)}m[e]=a}return p.forEach(e=>a.disposeIntermediateTensorInfo(e)),a.makeTensorInfo(u,"int32",m)}};const os={kernelName:J,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{axis:i}=s;cn(o,"argMin");let d=e.parseAxisParam(i,o.shape);const c=r.getAxesPermutation(d,o.shape.length);let l=o;const p=[];null!=c&&(l=ua({inputs:{x:o},backend:a,attrs:{perm:c}}),p.push(l),d=r.getInnerMostAxes(d.length,l.shape.length)),d=[d[0]],r.assertAxesAreInnerMostDims("argMin",d,l.shape.length);const[u,h]=r.computeOutAndReduceShapes(l.shape,d),f=e.sizeFromShape(u),m=e.makeZerosTypedArray(f,"int32"),k=e.sizeFromShape(h),I=a.data.get(l.dataId).values;for(let e=0;e<m.length;++e){const t=e*k;let n=I[t],a=0;for(let e=0;e<k;++e){const s=I[t+e];s<n&&(n=s,a=e)}m[e]=a}return p.forEach(e=>a.disposeIntermediateTensorInfo(e)),a.makeTensorInfo(u,"int32",m)}},rs={kernelName:Q,backendName:"cpu",kernelFunc:Wn(Q,e=>Math.asin(e))},is={kernelName:X,backendName:"cpu",kernelFunc:Wn(X,e=>Math.asinh(e))},ds={kernelName:ee,backendName:"cpu",kernelFunc:Wn(ee,e=>Math.atan(e))},cs={kernelName:te,backendName:"cpu",kernelFunc:Sn(te,fn((e,t)=>Math.atan2(e,t)))},ls={kernelName:ne,backendName:"cpu",kernelFunc:Wn(ne,e=>Math.atanh(e))};function ps(e,t,n,a,s,o){const r=s.strideHeight,d=s.strideWidth,c=s.dilationHeight,l=s.dilationWidth,p=s.effectiveFilterHeight,u=s.effectiveFilterWidth,h=s.padInfo.top,f=s.padInfo.left,m="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,k=i(s.outShape,n),I=k.values,g=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],y=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*g,i=t*a[0];for(let t=0;t<s.inChannels;++t)for(let k=0;k<s.outHeight;++k){const g=k*r-h,N=Math.max(0,g),x=Math.min(s.inHeight,p+g),T=n+k*b;for(let n=0;n<s.outWidth;++n){const r=n*d-f,p=Math.max(0,r),h=Math.min(s.inWidth,u+r);let k=m,g=0,b=0;for(let n=N;n<x;n+=c){const s=i+n*a[1];for(let n=p;n<h;n+=l){const r=e[s+n*a[2]+t];"max"===o&&r>k?k=r:"avg"===o&&(g+=r,b++)}if(isNaN(k))break}I[T+n*y+t]="avg"===o?g/b:k}}}return k}function us(e,t,n,a,s=!1,o=!1){const r=i(a.outShape,"int32"),d=a.strideHeight,c=a.strideWidth,l=a.dilationHeight,p=a.dilationWidth,u=a.effectiveFilterHeight,h=a.effectiveFilterWidth,f=a.padInfo.top,m=a.padInfo.left,k=i(t,n,e);for(let e=0;e<a.batchSize;++e)for(let t=0;t<a.inChannels;++t)for(let n=0;n<a.outHeight;++n){const i=n*d-f;let I=i;for(;I<0;)I+=l;const g=Math.min(a.inHeight,u+i);for(let d=0;d<a.outWidth;++d){const u=d*c-m;let f=u;for(;f<0;)f+=p;const b=Math.min(a.inWidth,h+u);let y=Number.NEGATIVE_INFINITY,N=-1;for(let n=I;n<g;n+=l){const r=n-i;for(let i=f;i<b;i+=p){const d=i-u,c=k.get(e,n,i,t);c>y&&(y=c,N=s?o?((e*a.inHeight+n)*a.inWidth+i)*a.inChannels+t:(n*a.inWidth+i)*a.inChannels+t:r*h+d)}}r.set(N,e,n,d,t)}}return r}function hs(e,t,n,a,s,o){const r=s.strideDepth,d=s.strideHeight,c=s.strideWidth,l=s.dilationDepth,p=s.dilationHeight,u=s.dilationWidth,h=s.effectiveFilterDepth,f=s.effectiveFilterHeight,m=s.effectiveFilterWidth,k=s.padInfo.front,I=s.padInfo.top,g=s.padInfo.left,b="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,y=i(s.outShape,n),N=y.values,x=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],T=s.outShape[2]*s.outShape[3]*s.outShape[4],S=s.outShape[3]*s.outShape[4],F=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*x,i=t*a[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outDepth;++y){const x=y*r-k;let v=x;for(;v<0;)v+=l;const M=Math.min(s.inDepth,h+x),A=n+y*T;for(let n=0;n<s.outHeight;++n){const r=n*d-I;let h=r;for(;h<0;)h+=p;const k=Math.min(s.inHeight,f+r),y=A+n*S;for(let n=0;n<s.outWidth;++n){const r=n*c-g;let d=r;for(;d<0;)d+=u;const f=Math.min(s.inWidth,m+r),I=y+n*F;let x=b,T=0,S=0;for(let n=v;n<M;n+=l){const s=i+n*a[1];for(let n=h;n<k;n+=p){const r=s+n*a[2];for(let n=d;n<f;n+=u){const s=e[r+n*a[3]+t];if("max"===o&&s>x?x=s:"avg"===o&&(T+=s,S++),isNaN(x))break}if(isNaN(x))break}if(isNaN(x))break}N[I+t]="avg"===o?T/S:x}}}}return y}const fs={kernelName:ae,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n;cn(o,"avgPool");const{filterSize:i,strides:d,pad:c,dimRoundingMode:l}=s;e.assert(r.eitherStridesOrDilationsAreOne(d,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${d} and dilations '1'`);const p=r.computePool2DInfo(o.shape,i,d,1,c,l);let u;if(1===p.filterWidth&&1===p.filterHeight&&e.arraysEqual(p.inShape,p.outShape))u=gn({inputs:{x:o},backend:a});else{const t=a.data.get(o.dataId).values,n=e.computeStrides(o.shape),s=ps(t,o.shape,o.dtype,n,p,"avg");u=a.makeTensorInfo(p.outShape,o.dtype,s.values)}return u}};const ms={kernelName:se,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{filterSize:i,strides:d,pad:c,dimRoundingMode:l,dataFormat:p}=s;cn(o,"avgPool3d");const u=r.computePool3DInfo(o.shape,i,d,1,c,l,p),h=hs(a.data.get(o.dataId).values,o.shape,o.dtype,e.computeStrides(o.shape),u,"avg");return a.makeTensorInfo(h.shape,"float32",h.values)}};const ks={kernelName:oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:s,input:o}=t,{filterSize:d,strides:c,pad:l,dimRoundingMode:p}=a;cn([s,o],"avgPool3DGrad");const u=r.computePool3DInfo(o.shape,d,c,1,l,p),h=u.strideDepth,f=u.strideHeight,m=u.strideWidth,k=u.filterDepth,I=u.filterHeight,g=u.filterWidth,b=u.dilationDepth,y=u.dilationHeight,N=u.dilationWidth,x=u.effectiveFilterDepth,T=u.effectiveFilterHeight,S=u.effectiveFilterWidth,F=x-1-u.padInfo.front,v=S-1-u.padInfo.left,M=T-1-u.padInfo.top,A=i(o.shape,"float32"),w=1/(k*I*g),z=n.bufferSync(s);for(let e=0;e<u.batchSize;++e)for(let t=0;t<u.inChannels;++t)for(let n=0;n<u.inDepth;++n)for(let a=0;a<u.inHeight;++a)for(let s=0;s<u.inWidth;++s){const o=n-F,r=a-M,i=s-v;let d=0;for(let n=0;n<x;n+=b){const a=(o+n)/h;if(!(a<0||a>=u.outDepth||Math.floor(a)!==a))for(let n=0;n<T;n+=y){const s=(r+n)/f;if(!(s<0||s>=u.outHeight||Math.floor(s)!==s))for(let n=0;n<S;n+=N){const o=(i+n)/m;if(o<0||o>=u.outWidth||Math.floor(o)!==o)continue;d+=z.get(e,a,s,o,t)}}}A.set(d*w,e,n,a,s,t)}return n.makeTensorInfo(A.shape,A.dtype,A.values)}};const Is={kernelName:re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:s,input:o}=t,d=o;cn([s,o],"avgPoolGrad");const{filterSize:c,strides:l,pad:p}=a,u=r.computePool2DInfo(d.shape,c,l,1,p),h=u.strideHeight,f=u.strideWidth,m=u.filterHeight,k=u.filterWidth,I=u.dilationHeight,g=u.dilationWidth,b=u.effectiveFilterHeight,y=u.effectiveFilterWidth,N=y-1-u.padInfo.left,x=b-1-u.padInfo.top,T=i(d.shape,"float32"),S=1/(m*k),F=n.data.get(s.dataId).values,v=i(s.shape,"float32",F);for(let e=0;e<u.batchSize;++e)for(let t=0;t<u.inChannels;++t)for(let n=0;n<u.inHeight;++n)for(let a=0;a<u.inWidth;++a){const s=n-x,o=a-N;let r=0;for(let n=0;n<b;n+=I){const a=(s+n)/h;if(!(a<0||a>=u.outHeight||Math.floor(a)!==a))for(let n=0;n<y;n+=g){const s=(o+n)/f;if(s<0||s>=u.outWidth||Math.floor(s)!==s)continue;r+=v.get(e,a,s,t)}}T.set(r*S,e,n,a,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const gs={kernelName:ie,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o,scale:r,offset:i,mean:d,variance:c}=n;e.assert(d.shape.length===c.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),e.assert(null==i||d.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),e.assert(null==r||d.shape.length===r.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),cn([o,d,c,r,i],"batchNorm");let{varianceEpsilon:l}=s;null==l&&(l=.001);const p=a.data.get(o.dataId).values,u=a.data.get(d.dataId).values,h=a.data.get(c.dataId).values,f=r?a.data.get(r.dataId).values:new Float32Array([1]),m=i?a.data.get(i.dataId).values:new Float32Array([0]),k=new Float32Array(p.length),I=m.length,g=f.length,b=h.length,y=u.length;let N=0,x=0,T=0,S=0;for(let e=0;e<p.length;++e)k[e]=m[N++]+(p[e]-u[x++])*f[T++]/Math.sqrt(h[S++]+l),N>=I&&(N=0),x>=y&&(x=0),T>=g&&(T=0),S>=b&&(S=0);return a.makeTensorInfo(o.shape,o.dtype,k)}};const bs={kernelName:de,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{blockShape:o,crops:i}=a;cn([s],"batchToSpaceND");const d=o.reduce((e,t)=>e*t),c=r.getReshaped(s.shape,o,d),l=r.getPermuted(c.length,o.length),p=r.getReshapedPermuted(s.shape,o,d),u=r.getSliceBeginCoords(i,o.length),h=r.getSliceSize(p,i,o.length),f=ja({inputs:{x:s},backend:n,attrs:{shape:c}}),m=ua({inputs:{x:f},backend:n,attrs:{perm:l}}),k=ja({inputs:{x:m},backend:n,attrs:{shape:p}}),I=ya({inputs:{x:k},backend:n,attrs:{begin:u,size:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(k),I}};const ys={kernelName:ce,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s,weights:o}=t,{size:r}=a,i=wn(n.data.get(s.dataId).values,n.data.get(o.dataId).values,o.dtype,o.shape,r);return n.makeTensorInfo([r],o.dtype,i)}},Ns={kernelName:le,backendName:"cpu",kernelFunc:Wn(le,(e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})},xs={kernelName:pe,backendName:"cpu",kernelFunc:t=>{const{x:n}=t.inputs,a=t.backend,s=new Float32Array(e.sizeFromShape(n.shape)),o=a.data.get(n.dataId),r=o.complexTensorInfos.real,i=o.complexTensorInfos.imag,d=a.data.get(r.dataId).values,c=a.data.get(i.dataId).values;for(let e=0;e<d.length;e++){const t=d[e],n=c[e];s[e]=Math.hypot(t,n)}return a.makeOutput(s,n.shape,"float32")}};function Ts(e){const{inputs:t,backend:n}=e,{input:a}=t,s=n.data.get(a.dataId).complexTensorInfos.imag,o=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,o)}const Ss={kernelName:ue,backendName:"cpu",kernelFunc:Ts};function Fs(t){const{inputs:n,backend:a,attrs:s}=t,{axis:o}=s,i=e.parseAxisParam(o,n[0].shape)[0];let d=r.computeOutShape(n.map(e=>e.shape),i);if(0===e.sizeFromShape(d))return a.makeTensorInfo(d,n[0].dtype,[]);const c=n.filter(t=>e.sizeFromShape(t.shape)>0);if(1===c.length)return gn({inputs:{x:c[0]},backend:a});const l=c.map(e=>e.shape);if(r.assertParamsConsistent(l,i),"complex64"===c[0].dtype){const e=c.map(e=>yn({inputs:{input:e},backend:a})),t=c.map(e=>Ts({inputs:{input:e},backend:a})),n=Fs({inputs:e,backend:a,attrs:{axis:i}}),s=Fs({inputs:t,backend:a,attrs:{axis:i}}),o=mn({inputs:{real:n,imag:s},backend:a});return e.forEach(e=>a.disposeIntermediateTensorInfo(e)),t.forEach(e=>a.disposeIntermediateTensorInfo(e)),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(s),o}const p=c.map(t=>{const n=e.sizeFromShape(t.shape.slice(i));return ja({inputs:{x:t},backend:a,attrs:{shape:[-1,n]}})}),u=p.map(e=>({vals:a.data.get(e.dataId).values,shape:e.shape}));d=r.computeOutShape(p.map(e=>e.shape),1);const h=1===p[0].shape[0],f=Pn(u,d,n[0].dtype,h),m=r.computeOutShape(c.map(e=>e.shape),i),k=a.makeTensorInfo(m,n[0].dtype,f);return p.forEach(e=>a.disposeIntermediateTensorInfo(e)),k}const vs={kernelName:he,backendName:"cpu",kernelFunc:Fs};function Ms(t){const{inputs:n,backend:a,attrs:s}=t,{x:o,filter:i}=n,{strides:d,pad:c,dataFormat:l,dilations:p,dimRoundingMode:u}=s;cn([o,i],"conv2d");const h=r.convertConv2DDataFormat(l),f=r.computeConv2DInfo(o.shape,i.shape,d,p,c,u,!1,h),m=f.filterHeight,k=f.filterWidth,I=f.dilationHeight,g=f.dilationWidth,b=f.padInfo.left,y=f.padInfo.top,N="channelsLast"===f.dataFormat,x=new E(f.outShape,o.dtype),T=e.computeStrides(o.shape),S=e.computeStrides(i.shape),F=T[0],v=N?T[1]:T[2],M=N?T[2]:1,A=N?1:T[1],w=x.strides[0],z=N?x.strides[1]:x.strides[2],D=N?x.strides[2]:1,W=N?1:x.strides[1],H=a.data.get(o.dataId).values,C=a.data.get(i.dataId).values,P=x.values;for(let e=0;e<f.batchSize;++e){const t=e*F,n=e*w;for(let e=0;e<f.outHeight;++e){const a=n+e*z,s=e*f.strideHeight-y;for(let e=0;e<m;++e){const n=s+e*I;if(n<0||n>=f.inHeight)continue;const o=e*S[0],r=t+n*v;for(let e=0;e<f.outWidth;++e){const t=a+e*D,n=e*f.strideWidth-b;for(let e=0;e<k;++e){const a=n+e*g;if(a<0||a>=f.inWidth)continue;const s=r+a*M;let i=o+e*S[1];for(let e=0;e<f.inChannels;++e){const n=H[s+e*A];for(let e=0;e<f.outChannels;++e)P[t+e*W]+=n*C[i+e];i+=f.outChannels}}}}}}return a.makeTensorInfo(x.shape,x.dtype,P)}const As={kernelName:fe,backendName:"cpu",kernelFunc:Ms};const ws={kernelName:me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s,dy:o}=t,{strides:i,pad:d,dataFormat:c,dimRoundingMode:l,filterShape:p}=a;cn([s,o],"conv2dBackpropFilter");const u=r.convertConv2DDataFormat(c),h=r.computeConv2DInfo(s.shape,p,i,1,d,l,!1,u),{strideHeight:f,strideWidth:m,filterHeight:k,filterWidth:I}=h,g="channelsLast"===h.dataFormat,b=new E(h.filterShape,"float32"),y=h.padInfo.left,N=h.padInfo.top,x=n.data.get(s.dataId).values,T=n.data.get(o.dataId).values,S=new E(s.shape,s.dtype,x),F=new E(o.shape,o.dtype,T);for(let e=0;e<k;++e){const t=Math.max(0,Math.ceil((N-e)/f)),n=Math.min(h.outHeight,(h.inHeight+N-e)/f);for(let a=0;a<I;++a){const s=Math.max(0,Math.ceil((y-a)/m)),o=Math.min(h.outWidth,(h.inWidth+y-a)/m);for(let r=0;r<h.inChannels;++r)for(let i=0;i<h.outChannels;++i){let d=0;for(let c=0;c<h.batchSize;++c)for(let l=t;l<n;++l){const t=e+l*f-N;for(let e=s;e<o;++e){const n=a+e*m-y;d+=g?S.get(c,t,n,r)*F.get(c,l,e,i):S.get(c,r,t,n)*F.get(c,i,l,e)}}b.set(d,e,a,r,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const zs={kernelName:ke,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{dy:o,filter:i}=n,{inputShape:d,strides:c,pad:l,dataFormat:p,dimRoundingMode:u}=s;cn([o,i],"conv2dBackpropInput");const h=e.computeStrides(i.shape),f=e.computeStrides(o.shape);let m=r.convertConv2DDataFormat(p);const k=r.computeConv2DInfo(d,i.shape,c,1,l,u,!1,m),I=new E(k.inShape,"float32"),g=I.values,b=a.data.get(o.dataId).values,y=a.data.get(i.dataId).values,[N,x,T]=h,{batchSize:S,filterHeight:F,filterWidth:v,inChannels:M,inHeight:A,inWidth:w,outChannels:z,outHeight:D,outWidth:W,strideHeight:H,strideWidth:C}=k;m=k.dataFormat;const P=F-1-k.padInfo.top,R=v-1-k.padInfo.left,$="channelsLast"===m,O=I.strides[0],V=$?I.strides[1]:I.strides[2],_=$?I.strides[2]:1,B=$?1:I.strides[1],L=f[0],q=$?f[1]:f[2],G=$?f[2]:1,U=$?1:f[1];for(let e=0;e<S;++e)for(let t=0;t<M;++t)for(let n=0;n<A;++n){const a=n-P,s=Math.max(0,Math.ceil(a/H)),o=Math.min(D,(F+a)/H);for(let r=0;r<w;++r){const i=r-R,d=Math.max(0,Math.ceil(i/C)),c=Math.min(W,(v+i)/C);let l=0;for(let n=s;n<o;++n){const s=n*H-a;for(let a=d;a<c;++a){const o=L*e+q*n+G*a,r=N*(F-1-s)+x*(v-1-(a*C-i))+T*t;for(let e=0;e<z;++e){l+=b[o+U*e]*y[r+e]}}}g[O*e+V*n+_*r+B*t]=l}}return a.makeTensorInfo(I.shape,I.dtype,I.values)}};const Ds={kernelName:Ie,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o,filter:i}=n,{strides:d,pad:c,dilations:l}=s;cn([o,i],"conv3d");const p=r.computeConv3DInfo(o.shape,i.shape,d,l,c),{filterDepth:u,filterHeight:h,filterWidth:f,dilationDepth:m,dilationHeight:k,dilationWidth:I,padInfo:g}=p,b=g.front,y=g.left,N=g.top,x=new E(p.outShape,o.dtype),T=a.data.get(o.dataId).values,S=a.data.get(i.dataId).values,F=x.values,v=e.computeStrides(o.shape),M=e.computeStrides(i.shape);for(let e=0;e<p.batchSize;++e){const t=e*v[0],n=e*x.strides[0];for(let e=0;e<p.outDepth;++e){const a=n+e*x.strides[1],s=e*p.strideDepth-b;for(let e=0;e<u;++e){const n=s+e*m;if(n<0||n>=p.inDepth)continue;const o=e*M[0],r=t+n*v[1];for(let e=0;e<p.outHeight;++e){const t=a+e*x.strides[2],n=e*p.strideHeight-N;for(let e=0;e<h;++e){const a=n+e*k;if(a<0||a>=p.inHeight)continue;const s=o+e*M[1],i=r+a*v[2];for(let e=0;e<p.outWidth;++e){const n=t+e*p.outChannels,a=e*p.strideWidth-y;for(let e=0;e<f;++e){const t=a+e*I;if(t<0||t>=p.inWidth)continue;const o=s+e*M[2],r=i+t*p.inChannels;let d=o;for(let e=0;e<p.inChannels;++e){const t=T[r+e];for(let e=0;e<p.outChannels;++e)F[n+e]+=t*S[d+e];d+=p.outChannels}}}}}}}}return a.makeTensorInfo(x.shape,x.dtype,x.values)}};const Ws={kernelName:ge,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o,dy:i}=n,{strides:d,pad:c,filterShape:l}=s;cn([o,i],"conv3dBackpropFilterV2");const p=e.computeStrides(o.shape),u=e.computeStrides(i.shape),h=r.computeConv3DInfo(o.shape,l,d,1,c),f=h.strideDepth,m=h.strideHeight,k=h.strideWidth,I=h.filterDepth,g=h.filterHeight,b=h.filterWidth,y=new E(h.filterShape,"float32"),N=y.values,[x,T,S,F]=y.strides,v=a.data.get(i.dataId).values,[M,A,w,z]=u,D=a.data.get(o.dataId).values,[W,H,C,P]=p,R=h.padInfo.front,$=h.padInfo.left,O=h.padInfo.top;for(let e=0;e<I;++e){const t=Math.max(0,Math.ceil((R-e)/f)),n=Math.min(h.outDepth,(h.inDepth+R-e)/f),a=e*x;for(let s=0;s<g;++s){const o=Math.max(0,Math.ceil((O-s)/m)),r=Math.min(h.outHeight,(h.inHeight+O-s)/m),i=s*T+a;for(let a=0;a<b;++a){const d=Math.max(0,Math.ceil(($-a)/k)),c=Math.min(h.outWidth,(h.inWidth+$-a)/k),l=a*S+i;for(let i=0;i<h.inChannels;++i){const p=i*F+l;for(let l=0;l<h.outChannels;++l){let u=0;for(let p=0;p<h.batchSize;++p){const h=p*W,I=p*M;for(let p=t;p<n;++p){const t=(e+p*f-R)*H+h,n=p*A+I;for(let e=o;e<r;++e){const o=(s+e*m-O)*C+t,r=e*w+n;for(let e=d;e<c;++e){const t=e*z+r;u+=D[(a+e*k-$)*P+o+i]*v[t+l]}}}}N[p+l]=u}}}}}return a.makeTensorInfo(y.shape,y.dtype,y.values)}};const Hs={kernelName:be,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{dy:o,filter:i}=n,{pad:d,strides:c,inputShape:l}=s;cn([o],"conv3dBackpropInputV2");const p=e.computeStrides(o.shape),u=e.computeStrides(i.shape),h=r.computeConv3DInfo(l,i.shape,c,1,d),f=new E(h.inShape,"float32"),m=f.values,[k,I,g,b]=f.strides,y=a.data.get(o.dataId).values,[N,x,T,S]=p,F=a.data.get(i.dataId).values,[v,M,A,w]=u,{batchSize:z,filterDepth:D,filterHeight:W,filterWidth:H,inChannels:C,inDepth:P,inHeight:R,inWidth:$,outChannels:O,outDepth:V,outHeight:_,outWidth:B,strideDepth:L,strideHeight:q,strideWidth:G}=h,U=D-1-h.padInfo.front,Z=W-1-h.padInfo.top,j=H-1-h.padInfo.left;for(let e=0;e<z;++e)for(let t=0;t<C;++t)for(let n=0;n<P;++n){const a=n-U,s=Math.max(0,Math.ceil(a/L)),o=Math.min(V,(D+a)/L);for(let r=0;r<R;++r){const i=r-Z,d=Math.max(0,Math.ceil(i/q)),c=Math.min(_,(W+i)/q);for(let l=0;l<$;++l){const p=l-j,u=Math.max(0,Math.ceil(p/G)),h=Math.min(B,(H+p)/G);let f=0;for(let n=s;n<o;++n){const s=n*L-a;for(let a=d;a<c;++a){const o=a*q-i;for(let r=u;r<h;++r){const i=N*e+x*n+T*a+S*r,d=v*(D-1-s)+M*(W-1-o)+A*(H-1-(r*G-p))+w*t;for(let e=0;e<O;++e){f+=y[i+e]*F[d+e]}}}}m[k*e+I*n+g*r+b*l+t]=f}}}return a.makeTensorInfo(f.shape,f.dtype,f.values)}},Es={kernelName:ye,backendName:"cpu",kernelFunc:Wn(ye,e=>Math.cos(e))},Cs={kernelName:Ne,backendName:"cpu",kernelFunc:Wn(Ne,e=>Math.cosh(e))};const Ps={kernelName:xe,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{image:o,boxes:r,boxInd:d}=n,{cropSize:c,method:l,extrapolationValue:p}=s,[u,h,f,m]=o.shape,k=r.shape[0],[I,g]=c,b=i([k,I,g,m],"float32"),y=a.data.get(r.dataId).values,N=a.data.get(d.dataId).values,x=a.data.get(o.dataId).values,T=e.computeStrides(o.shape),S=e.computeStrides(b.shape);for(let e=0;e<k;e++){const t=4*e,n=y[t],a=y[t+1],s=y[t+2],o=y[t+3],r=N[e];if(r>=u)continue;const i=I>1?(s-n)*(h-1)/(I-1):0,d=g>1?(o-a)*(f-1)/(g-1):0;for(let t=0;t<I;t++){const c=I>1?n*(h-1)+t*i:.5*(n+s)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let a=0;a<m;a++){const s=a+n*S[2]+t*S[1]+e*S[0];b.values[s]=p}else if("bilinear"===l){const n=Math.floor(c),s=Math.ceil(c),i=c-n;for(let c=0;c<g;c++){const l=g>1?a*(f-1)+c*d:.5*(a+o)*(f-1);if(l<0||l>f-1){for(let n=0;n<m;n++){const a=n+c*S[2]+t*S[1]+e*S[0];b.values[a]=p}continue}const u=Math.floor(l),h=Math.ceil(l),k=l-u;for(let a=0;a<m;a++){let o=a+u*T[2]+n*T[1]+r*T[0];const d=x[o];o=a+h*T[2]+n*T[1]+r*T[0];const l=x[o];o=a+u*T[2]+s*T[1]+r*T[0];const p=x[o];o=a+h*T[2]+s*T[1]+r*T[0];const f=d+(l-d)*k,m=p+(x[o]-p)*k;o=a+c*S[2]+t*S[1]+e*S[0],b.values[o]=f+(m-f)*i}}}else for(let n=0;n<g;++n){const s=g>1?a*(f-1)+n*d:.5*(a+o)*(f-1);if(s<0||s>f-1){for(let a=0;a<m;a++){const s=a+n*S[2]+t*S[1]+e*S[0];b.values[s]=p}continue}const i=Math.round(s),l=Math.round(c);for(let a=0;a<m;a++){const s=a+i*T[2]+l*T[1]+r*T[0],o=a+n*S[2]+t*S[1]+e*S[0];b.values[o]=x[s]}}}}return a.makeTensorInfo(b.shape,b.dtype,b.values)}};const Rs={kernelName:Te,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{axis:i,exclusive:d,reverse:c}=s;cn(o,"cumsum");const l=r.getAxesPermutation([i],o.shape.length);let p=o;null!=l&&(p=ua({inputs:{x:o},backend:a,attrs:{perm:l}}));const u=r.getInnerMostAxes(1,o.shape.length)[0];if(u!==p.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${p.shape.length-1} but got axis=${u}`);const h=M(p.dtype,"int32"),f=e.makeZerosTypedArray(e.sizeFromShape(p.shape),h),m=a.data.get(p.dataId).values,k=p.shape[p.shape.length-1],I=c?(e,t)=>e+k-t-1:(e,t)=>e+t;for(let e=0;e<m.length;e+=k)for(let t=0;t<k;t++){const n=I(e,t);if(0===t)f[n]=d?0:m[n];else{const a=I(e,t-1);f[n]=d?m[a]+f[a]:m[n]+f[a]}}const g=a.makeTensorInfo(p.shape,h,f);if(null!=l){const e=ua({inputs:{x:g},backend:a,attrs:{perm:r.getUndoAxesPermutation(l)}});return a.disposeIntermediateTensorInfo(g),a.disposeIntermediateTensorInfo(p),e}return g}};const $s={kernelName:Se,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s,weights:o}=t,{size:r,binaryOutput:i}=a;if(1===s.shape.length){const e=wn(n.data.get(s.dataId).values,n.data.get(o.dataId).values,o.dtype,o.shape,r);return n.makeTensorInfo([r],o.dtype,e)}if(2===s.shape.length){const e=zn(n.bufferSync(s),n.bufferSync(o),r,i);return n.makeTensorInfo(e.shape,o.dtype,e.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+s.shape.length+".")}};const Os={kernelName:Fe,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{blockSize:r,dataFormat:i}=s;e.assert("NHWC"===i,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+i),e.assert(r>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+r);const d=o.shape[0],c=o.shape[1],l=o.shape[2],p=o.shape[3],u=c*r,h=l*r,f=p/(r*r),m=a.data.get(o.dataId).values,k=new Float32Array(d*u*h*f);let I=0;for(let e=0;e<d;++e)for(let t=0;t<u;++t){const n=Math.floor(t/r),a=t%r;for(let t=0;t<h;++t){const s=Math.floor(t/r),o=(a*r+t%r)*f;for(let t=0;t<f;++t){const a=t+o+p*(s+l*(n+c*e));k[I++]=m[a]}}}return a.makeTensorInfo([d,u,h,f],o.dtype,k)}};function Vs(t){const{inputs:n,backend:a,attrs:s}=t,{x:o,filter:i}=n,{strides:d,pad:c,dilations:l,dimRoundingMode:p}=s;cn([o,i],"depthwiseConv2DNative");const u=e.computeStrides(o.shape),h=e.computeStrides(i.shape);let f=l;null==f&&(f=[1,1]),e.assert(r.eitherStridesOrDilationsAreOne(d,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${d} and dilations '${f}'`);const m=r.computeConv2DInfo(o.shape,i.shape,d,f,c,p,!0),{filterHeight:k,filterWidth:I,dilationHeight:g,dilationWidth:b,padInfo:y}=m,N=y.left,x=y.top,T=m.outChannels/m.inChannels,S=new E(m.outShape,o.dtype),F=a.data.get(o.dataId).values,v=a.data.get(i.dataId).values,M=S.values;for(let e=0;e<m.batchSize;++e){const t=e*u[0],n=e*S.strides[0];for(let e=0;e<m.outHeight;++e){const a=n+e*S.strides[1],s=e*m.strideHeight-x;for(let e=0;e<k;++e){const n=s+e*g;if(n<0||n>=m.inHeight)continue;const o=e*h[0],r=t+n*u[1];for(let e=0;e<m.outWidth;++e){const t=a+e*S.strides[2],n=e*m.strideWidth-N;for(let e=0;e<I;++e){const a=n+e*b;if(a<0||a>=m.inWidth)continue;const s=o+e*h[1],i=r+a*m.inChannels;let d=t,c=s;for(let e=0;e<m.inChannels;++e){const t=F[i+e];for(let e=0;e<T;++e)M[d+e]+=t*v[c+e];d+=T,c+=T}}}}}}return a.makeTensorInfo(S.shape,S.dtype,S.values)}const _s={kernelName:ve,backendName:"cpu",kernelFunc:Vs};const Bs={kernelName:Me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s,dy:o}=t,{strides:i,dilations:d,pad:c,dimRoundingMode:l,filterShape:p}=a;cn([s,o],"depthwiseConv2dNativeBackpropFilter");const u=r.computeConv2DInfo(s.shape,p,i,d,c,l,!0),{strideHeight:h,strideWidth:f,filterHeight:m,filterWidth:k}=u,I=new E(u.filterShape,"float32"),g=u.padInfo.left,b=u.padInfo.top,y=u.outChannels/u.inChannels,N=n.data.get(s.dataId).values,x=new E(s.shape,s.dtype,N),T=n.data.get(o.dataId).values,S=new E(o.shape,o.dtype,T);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((b-e)/h)),n=Math.min(u.outHeight,(u.inHeight+b-e)/h);for(let a=0;a<k;++a){const s=Math.max(0,Math.ceil((g-a)/f)),o=Math.min(u.outWidth,(u.inWidth+g-a)/f);for(let r=0;r<u.outChannels;++r){const i=Math.trunc(r/y),d=r%y;let c=0;for(let d=0;d<u.batchSize;++d)for(let l=t;l<n;++l){const t=e+l*h-b;for(let e=s;e<o;++e){const n=a+e*f-g;c+=x.get(d,t,n,i)*S.get(d,l,e,r)}}I.set(c,e,a,i,d)}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const Ls={kernelName:Ae,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{dy:o,filter:i}=n,{strides:d,dilations:c,pad:l,dimRoundingMode:p,inputShape:u}=s;cn([o,i],"depthwiseConv2DNativeBackpropInput");const h=e.computeStrides(o.shape),f=e.computeStrides(i.shape),m=r.computeConv2DInfo(u,i.shape,d,c,l,p,!0),k=new E(m.inShape,"float32"),I=k.values,[g,b,y]=k.strides,N=a.data.get(o.dataId).values,[x,T,S]=h,F=a.data.get(i.dataId).values,[v,M,A]=f,{batchSize:w,filterHeight:z,filterWidth:D,inChannels:W,inHeight:H,inWidth:C,outChannels:P,outHeight:R,outWidth:$,strideHeight:O,strideWidth:V}=m,_=z-1-m.padInfo.top,B=D-1-m.padInfo.left,L=P/W;for(let e=0;e<w;++e)for(let t=0;t<W;++t)for(let n=0;n<H;++n){const a=n-_,s=Math.max(0,Math.ceil(a/O)),o=Math.min(R,(z+a)/O);for(let r=0;r<C;++r){const i=r-B,d=Math.max(0,Math.ceil(i/V)),c=Math.min($,(D+i)/V);let l=0;for(let n=s;n<o;++n){const s=n*O-a;for(let a=d;a<c;++a){const o=x*e+T*n+S*a,r=v*(z-1-s)+M*(D-1-(a*V-i))+A*t;for(let e=0;e<L;++e){l+=N[o+(t*L+e)]*F[r+e]}}}I[g*e+b*n+y*r+t]=l}}return a.makeTensorInfo(k.shape,k.dtype,k.values)}};const qs={kernelName:we,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a}=t,{x:s}=n,o=e.sizeFromShape(s.shape),r=a.data.get(s.dataId).values,d=i([o,o],s.dtype),c=d.values;for(let e=0;e<r.length;e++)c[e*o+e]=r[e];const l=[...s.shape,...s.shape];return a.makeTensorInfo(l,d.dtype,d.values)}},Gs={kernelName:ze,backendName:"cpu",kernelFunc:({inputs:t,backend:n,attrs:a})=>{const{x:s,filter:o}=t,{strides:i,pad:d,dilations:c}=a,l=n,p=l.data.get(s.dataId).values,u=s.shape.length,h=l.data.get(o.dataId).values,f=o.shape.length,{batchSize:m,inHeight:k,inWidth:I,inChannels:g,outHeight:b,outWidth:y,padInfo:N,strideHeight:x,strideWidth:T,filterHeight:S,filterWidth:F,dilationHeight:v,dilationWidth:M,outShape:A}=r.computeDilation2DInfo(s.shape,o.shape,i,d,"NHWC",c),w=e.sizeFromShape(A),z=A.length,D=e.getArrayFromDType(s.dtype,w);for(let t=0;t<m;++t)for(let n=0;n<b;++n){const a=n*x-N.top;for(let r=0;r<y;++r){const i=r*T-N.left;for(let d=0;d<g;++d){let c=Number.MIN_SAFE_INTEGER;for(let n=0;n<S;++n){const r=a+n*v;if(r>=0&&r<k)for(let a=0;a<F;++a){const l=i+a*M;if(l>=0&&l<I){const i=e.locToIndex([t,r,l,d],u,e.computeStrides(s.shape)),m=e.locToIndex([n,a,d],f,e.computeStrides(o.shape)),k=p[i]+h[m];k>c&&(c=k)}}}D[e.locToIndex([t,n,r,d],z,e.computeStrides(A))]=c}}}return{dataId:l.write(e.toTypedArray(D,s.dtype),A,s.dtype),shape:A,dtype:s.dtype}}},Us={kernelName:De,backendName:"cpu",kernelFunc:({inputs:t,backend:n,attrs:a})=>{const{x:s,filter:o,dy:i}=t,{strides:d,pad:c,dilations:l}=a,p=n,u=e.toNestedArray(s.shape,p.data.get(s.dataId).values),h=e.toNestedArray(o.shape,p.data.get(o.dataId).values),{batchSize:f,inHeight:m,inWidth:k,inChannels:I,outHeight:g,outWidth:b,padInfo:y,strideHeight:N,strideWidth:x,filterHeight:T,filterWidth:S,dilationHeight:F,dilationWidth:v,outShape:M}=r.computeDilation2DInfo(s.shape,o.shape,d,c,"NHWC",l);e.assert(i.rank===M.length,()=>`Error in ${De}, dy must have the same rank as output ${M.length}, but got `+i.rank);const A=e.toNestedArray(M,p.data.get(i.dataId).values),w=e.makeZerosNestedTypedArray(o.shape,o.dtype);for(let e=0;e<f;++e)for(let t=0;t<g;++t){const n=t*N-y.top;for(let a=0;a<b;++a){const s=a*x-y.left;for(let o=0;o<I;++o){let r=Number.MIN_SAFE_INTEGER,i=0,d=0;for(let t=0;t<T;++t){const a=n+t*F;if(a>=0&&a<m)for(let n=0;n<S;++n){const c=s+n*v;if(c>=0&&c<k){const s=u[e][a][c][o]+h[t][n][o];s>r&&(r=s,i=t,d=n)}}}w[i][d][o]+=A[e][t][a][o]}}}return{dataId:p.write(e.toTypedArray(w,s.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}},Zs={kernelName:We,backendName:"cpu",kernelFunc:({inputs:t,backend:n,attrs:a})=>{const{x:s,filter:o,dy:i}=t,{strides:d,pad:c,dilations:l}=a,p=n,u=e.toNestedArray(s.shape,p.data.get(s.dataId).values),h=e.toNestedArray(o.shape,p.data.get(o.dataId).values),{batchSize:f,inHeight:m,inWidth:k,inChannels:I,outHeight:g,outWidth:b,padInfo:y,strideHeight:N,strideWidth:x,filterHeight:T,filterWidth:S,dilationHeight:F,dilationWidth:v,outShape:M}=r.computeDilation2DInfo(s.shape,o.shape,d,c,"NHWC",l);e.assert(i.rank===M.length,()=>`Error in ${We}, dy must have the same rank as output ${M.length}, but got `+i.rank);const A=e.toNestedArray(M,p.data.get(i.dataId).values),w=e.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<f;++e)for(let t=0;t<g;++t){const n=t*N-y.top;for(let a=0;a<b;++a){const s=a*x-y.left;for(let o=0;o<I;++o){let r=Number.MIN_SAFE_INTEGER,i=n<0?0:n,d=s<0?0:s;for(let t=0;t<T;++t){const a=n+t*F;if(a>=0&&a<m)for(let n=0;n<S;++n){const c=s+n*v;if(c>=0&&c<k){const s=u[e][a][c][o]+h[t][n][o];s>r&&(r=s,i=a,d=c)}}}w[e][i][d][o]+=A[e][t][a][o]}}}return{dataId:p.write(e.toTypedArray(w,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};function js(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{axis:i,keepDims:d}=s;let c;cn(o,"sum"),c="bool"===o.dtype?xn({inputs:{x:o},backend:a,attrs:{dtype:"int32"}}):gn({inputs:{x:o},backend:a});const l=c.shape.length,p=e.parseAxisParam(i,c.shape),u=r.getAxesPermutation(p,l);let h=p,f=c;null!=u&&(f=ua({inputs:{x:c},backend:a,attrs:{perm:u}}),h=r.getInnerMostAxes(h.length,l)),r.assertAxesAreInnerMostDims("sum",h,f.shape.length);const[m,k]=r.computeOutAndReduceShapes(f.shape,h);let I=In(a,m,r.upcastType(f.dtype,"int32"));const g=e.sizeFromShape(k),b=a.data.get(I.dataId).values,y=a.data.get(f.dataId).values;for(let e=0;e<b.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=y[t+e];b[e]=n}if(d){const e=I;I=ja({inputs:{x:I},backend:a,attrs:{shape:r.expandShapeToKeepDim(I.shape,p)}}),a.disposeIntermediateTensorInfo(e)}return a.disposeIntermediateTensorInfo(c),null!=u&&a.disposeIntermediateTensorInfo(f),I}const Ks={kernelName:He,backendName:"cpu",kernelFunc:js};const Ys={kernelName:Ee,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{equation:o}=s,i=n,{allDims:d,summedDims:c,idDims:l}=r.decodeEinsumEquation(o,i.length);r.checkEinsumDimSizes(d.length,l,i);const{path:p,steps:u}=r.getEinsumComputePath(c,l),h=u.length;let f=null,m=d.length;const k=[];for(let t=0;t<h;++t){for(const n of u[t]){const{permutationIndices:t,expandDims:s}=r.getEinsumPermutation(m,l[n]);let o;r.isIdentityPermutation(t)?o=i[n]:(o=ua({inputs:{x:i[n]},backend:a,attrs:{perm:t}}),k.push(o));const d=o.shape.slice();for(let e=0;e<s.length;++e)d.splice(s[e],0,1);e.arraysEqual(o.shape,d)||(o=ja({inputs:{x:o},backend:a,attrs:{shape:d}}),k.push(o)),null===f?f=o:(f=oa({inputs:{a:o,b:f},backend:a}),k.push(f))}t<h-1&&(p[t]>=0&&(f=js({inputs:{x:f},backend:a,attrs:{axis:p[t]-(d.length-m),keepDims:!1}}),k.push(f)),m--)}for(const e of k)e!==f&&a.disposeIntermediateTensorInfo(e);return f}};const Js={kernelName:Ce,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a}=t,{dy:s,y:o}=n;cn([s,o],"eluGrad");const r=new Float32Array(e.sizeFromShape(o.shape)),i=a.data.get(o.dataId).values,d=a.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];r[e]=t>=1?d[e]:d[e]*(t+1)}return a.makeTensorInfo(o.shape,"float32",r)}},Qs=Sn(Pe,fn((e,t)=>e===t?1:0),null,"bool"),Xs={kernelName:Pe,backendName:"cpu",kernelFunc:Qs},eo=r.ERF_P,to=r.ERF_A1,no=r.ERF_A2,ao=r.ERF_A3,so=r.ERF_A4,oo=r.ERF_A5,ro={kernelName:Re,backendName:"cpu",kernelFunc:Wn(Re,e=>{const t=Math.sign(e),n=Math.abs(e),a=1/(1+eo*n);return t*(1-((((oo*a+so)*a+ao)*a+no)*a+to)*a*Math.exp(-n*n))})};function io(t){const{inputs:n,backend:a,attrs:s}=t,{input:o}=n,{dim:r}=s,i=o.shape.length,d=o.shape.slice();let c=r;return r<0&&(e.assert(-(i+1)<=r,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),c=i+r+1),d.splice(c,0,1),ja({inputs:{x:o},backend:a,attrs:{shape:d}})}const co={kernelName:$e,backendName:"cpu",kernelFunc:io},lo=Sn(Oe,fn((e,t)=>e/t)),po={kernelName:Oe,backendName:"cpu",kernelFunc:lo};function uo(t,n,a){const s=t.shape,o=s[0],i=s[1],d=a.data.get(t.dataId),c=d.complexTensorInfos.real,l=d.complexTensorInfos.imag,p=[o,i],u=e.sizeFromShape(p),h=e.getTypedArrayFromDType("float32",u),f=e.getTypedArrayFromDType("float32",u);for(let e=0;e<o;e++){const t=ya({inputs:{x:c},backend:a,attrs:{begin:[e,0],size:[1,i]}}),s=ya({inputs:{x:l},backend:a,attrs:{begin:[e,0],size:[1,i]}}),o=mn({inputs:{real:t,imag:s},backend:a}),{real:d,imag:p}=ho(o,n,a),u=r.mergeRealAndImagArrays(d,p);for(let t=0;t<i;t++){const n=r.getComplexWithIndex(u,t);h[e*i+t]=n.real,f[e*i+t]=n.imag}a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(o)}const m=a.makeTensorInfo(p,"float32",h),k=a.makeTensorInfo(p,"float32",f),I=mn({inputs:{real:m,imag:k},backend:a});return a.disposeIntermediateTensorInfo(m),a.disposeIntermediateTensorInfo(k),I}function ho(t,n,a){const s=e.sizeFromShape(t.shape),o=a.data.get(t.dataId),i=a.data.get(o.complexTensorInfos.real.dataId).values,d=a.data.get(o.complexTensorInfos.imag.dataId).values;if(0==((c=s)&c-1)){const o=function e(t,n,a,s,o){if(1===a)return{real:t,imag:n};const i=r.mergeRealAndImagArrays(t,n),d=a/2,c=r.complexWithEvenIndex(i),l=c.real,p=c.imag,u=[l.length],h=o.makeTensorInfo(u,"float32",l),f=o.makeTensorInfo(u,"float32",p),m=mn({inputs:{real:h,imag:f},backend:o}),k=r.complexWithOddIndex(i),I=k.real,g=k.imag,b=[I.length],y=o.makeTensorInfo(b,"float32",I),N=o.makeTensorInfo(b,"float32",g),x=mn({inputs:{real:y,imag:N},backend:o}),T=e(l,p,d,s,o),S=T.real,F=T.imag,v=[S.length],M=o.makeTensorInfo(v,"float32",S),A=o.makeTensorInfo(v,"float32",F),w=mn({inputs:{real:M,imag:A},backend:o}),z=e(I,g,d,s,o),D=z.real,W=z.imag,H=[D.length],E=o.makeTensorInfo(H,"float32",D),C=o.makeTensorInfo(H,"float32",W),P=mn({inputs:{real:E,imag:C},backend:o}),R=r.exponents(a,s),$=[R.real.length],O=o.makeTensorInfo($,"float32",R.real),V=o.makeTensorInfo($,"float32",R.imag),_=mn({inputs:{real:O,imag:V},backend:o}),B=oa({inputs:{a:_,b:P},backend:o}),L=Mn({inputs:{a:w,b:B},backend:o}),q=Ma({inputs:{a:w,b:B},backend:o}),G=yn({inputs:{input:L},backend:o}),U=yn({inputs:{input:q},backend:o}),Z=Ts({inputs:{input:L},backend:o}),j=Ts({inputs:{input:q},backend:o}),K=Fs({inputs:[G,U],backend:o,attrs:{axis:0}}),Y=Fs({inputs:[Z,j],backend:o,attrs:{axis:0}}),J=o.data.get(K.dataId).values,Q=o.data.get(Y.dataId).values;return o.disposeIntermediateTensorInfo(h),o.disposeIntermediateTensorInfo(f),o.disposeIntermediateTensorInfo(m),o.disposeIntermediateTensorInfo(y),o.disposeIntermediateTensorInfo(N),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(M),o.disposeIntermediateTensorInfo(A),o.disposeIntermediateTensorInfo(w),o.disposeIntermediateTensorInfo(E),o.disposeIntermediateTensorInfo(C),o.disposeIntermediateTensorInfo(P),o.disposeIntermediateTensorInfo(O),o.disposeIntermediateTensorInfo(V),o.disposeIntermediateTensorInfo(_),o.disposeIntermediateTensorInfo(B),o.disposeIntermediateTensorInfo(L),o.disposeIntermediateTensorInfo(q),o.disposeIntermediateTensorInfo(G),o.disposeIntermediateTensorInfo(Z),o.disposeIntermediateTensorInfo(U),o.disposeIntermediateTensorInfo(j),o.disposeIntermediateTensorInfo(K),o.disposeIntermediateTensorInfo(Y),{real:J,imag:Q}}(i,d,s,n,a),c=[t.shape[0],t.shape[1]];if(n){const t=a.makeTensorInfo(c,"float32",o.real),n=a.makeTensorInfo(c,"float32",o.imag),r=a.makeTensorInfo([],"float32",e.createScalarValue(s,"float32")),i=gn({inputs:{x:r},backend:a}),d=po.kernelFunc({inputs:{a:t,b:r},backend:a}),l=po.kernelFunc({inputs:{a:n,b:i},backend:a}),p=a.data.get(d.dataId).values,u=a.data.get(l.dataId).values;return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(r),a.disposeIntermediateTensorInfo(i),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(l),{real:p,imag:u}}return o}{const e=function(e,t,n){const a=new Float32Array(2*t);for(let s=0;s<t;s++){let o=0,i=0;for(let a=0;a<t;a++){const d=r.exponent(s*a,t,n),c=r.getComplexWithIndex(e,a);o+=c.real*d.real-c.imag*d.imag,i+=c.real*d.imag+c.imag*d.real}n&&(o/=t,i/=t),r.assignToTypedArray(a,o,i,s)}return a}(r.mergeRealAndImagArrays(i,d),s,n);return r.splitRealAndImagArrays(e)}var c}const fo={kernelName:Ve,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a}=t,{input:s}=n,o=e.sizeFromShape(s.shape),r=s.shape[s.shape.length-1],i=ja({inputs:{x:s},backend:a,attrs:{shape:[o/r,r]}}),d=uo(i,!1,a),c=ja({inputs:{x:d},backend:a,attrs:{shape:s.shape}});return a.disposeIntermediateTensorInfo(i),a.disposeIntermediateTensorInfo(d),c}};function mo(t){const{backend:n,attrs:a}=t,{shape:s,value:o,dtype:r}=a,i=r||e.inferDtype(o),d=e.getArrayFromDType(i,e.sizeFromShape(s));return function(e,t,n){e.fill(t)}(d,o),n.makeTensorInfo(s,i,d)}const ko={kernelName:_e,backendName:"cpu",kernelFunc:mo};const Io={kernelName:Be,backendName:"cpu",kernelFunc:({inputs:t,attrs:n,backend:a})=>{const{image:s}=t,o=a,r=e.getTypedArrayFromDType(s.dtype,e.sizeFromShape(s.shape)),[i,d,c,l]=s.shape,p=o.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*c*d*l;for(let e=0;e<d;e++){const n=e*(c*l);for(let a=0;a<c;a++){const s=a*l;for(let o=0;o<l;o++){const d=[i,e,a,o][2],u=Math.round(c-d),h=t+n+s+o;let f=p[h];if(u>=0&&u<c){f=p[t+n+u*l+o]}r[h]=f}}}}return{dataId:o.write(r,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},go={kernelName:Le,backendName:"cpu",kernelFunc:Sn(Le,fn((e,t)=>Math.floor(e/t)),null,"int32")};const bo={kernelName:qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s,filter:o,bias:r,preluActivationWeights:i}=t,{strides:d,pad:c,dataFormat:l,dilations:p,dimRoundingMode:u,activation:h,leakyreluAlpha:f}=a;let m=Ms({inputs:{x:s,filter:o},backend:n,attrs:{strides:d,pad:c,dataFormat:l,dilations:p,dimRoundingMode:u}});if(r){const e=m;m=Mn({inputs:{a:m,b:r},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=m;m=Za(n,m,h,i,f),n.disposeIntermediateTensorInfo(e)}return m}};const yo={kernelName:Ge,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s,filter:o,bias:r,preluActivationWeights:i}=t,{strides:d,pad:c,dataFormat:l,dilations:p,dimRoundingMode:u,activation:h,leakyreluAlpha:f}=a;let m=Vs({inputs:{x:s,filter:o},backend:n,attrs:{strides:d,pad:c,dataFormat:l,dilations:p,dimRoundingMode:u}});if(r){const e=m;m=Mn({inputs:{a:m,b:r},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=m;m=Za(n,m,h,i,f),n.disposeIntermediateTensorInfo(e)}return m}};const No={kernelName:Ue,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a}=t,{params:s,indices:o}=n,d=e.sizeFromShape(s.shape),c=o.shape,l=c[c.length-1],[p,u,h,f]=r.prepareAndValidate(s,o);if(0===u)return a.makeTensorInfo(p,s.dtype,[]);const m=i([u,h],s.dtype),k=a.data.get(o.dataId).values,I=a.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=[];let n=0;for(let a=0;a<l;a++){const s=k[e*l+a];n+=s*f[a],t.push(s)}if(n<0||n>=d/h)throw new Error(`Invalid indices: ${t} does not index into ${s.shape}`);for(let t=0;t<h;t++)m.values[e*h+t]=I[n*h+t]}return a.makeTensorInfo(p,m.dtype,m.values)}};const xo={kernelName:Ze,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o,indices:i}=n,{axis:d,batchDims:c}=s;cn([o,i],"gatherV2");let l=c;null==c&&(l=0);const p=e.sizeFromShape(i.shape),u=e.parseAxisParam(d,o.shape)[0],h=r.segment_util.collectGatherOpShapeInfo(o,i,u,l),f=ja({inputs:{x:o},backend:a,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),m=ja({inputs:{x:i},backend:a,attrs:{shape:[h.batchSize,p/h.batchSize]}}),k=[h.batchSize,h.outerSize,p/h.batchSize,h.sliceSize],I=a.bufferSync(m),g=qn(a.bufferSync(f),I,k);return a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(m),a.makeTensorInfo(h.outputShape,g.dtype,g.values)}},To={kernelName:je,backendName:"cpu",kernelFunc:Sn(je,fn((e,t)=>e>=t?1:0),null,"bool")};const So={kernelName:Ke,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a}=t,{input:s}=n,o=e.sizeFromShape(s.shape),r=s.shape[s.shape.length-1],i=ja({inputs:{x:s},backend:a,attrs:{shape:[o/r,r]}}),d=uo(i,!0,a),c=ja({inputs:{x:d},backend:a,attrs:{shape:s.shape}});return a.disposeIntermediateTensorInfo(i),a.disposeIntermediateTensorInfo(d),c}},Fo={kernelName:Ye,backendName:"cpu",kernelFunc:Wn(Ye,e=>Number.isFinite(e)?1:0,"bool")},vo={kernelName:Je,backendName:"cpu",kernelFunc:Wn(Je,e=>Math.abs(e)===1/0?1:0,"bool")},Mo={kernelName:Qe,backendName:"cpu",kernelFunc:Wn(Qe,e=>Number.isNaN(e)?1:0,"bool")},Ao={kernelName:Xe,backendName:"cpu",kernelFunc:Sn(Xe,fn((e,t)=>e<=t?1:0),null,"bool")};const wo={kernelName:et,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:a,stop:s,num:o}=n,r=Kn(a,s,o);return t.makeTensorInfo([r.length],"float32",r)}},zo={kernelName:tt,backendName:"cpu",kernelFunc:Wn(tt,e=>Math.log1p(e))},Do={kernelName:nt,backendName:"cpu",kernelFunc:Sn(nt,fn((e,t)=>e&&t),null,"bool")},Wo={kernelName:at,backendName:"cpu",kernelFunc:Wn(at,e=>e?0:1,"bool")},Ho={kernelName:st,backendName:"cpu",kernelFunc:Sn(st,fn((e,t)=>e||t),null,"bool")};const Eo={kernelName:ot,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{depthRadius:r,bias:i,alpha:d,beta:c}=s;cn(o,"LRN");const l=o.shape[3],p=l-1,u=a.data.get(o.dataId).values,h=e.sizeFromShape(o.shape),f=new Float32Array(h);function m(e){const t=e%l;let n=e-t+Math.max(0,t-r);const a=e-t+Math.min(t+r,p);let s=0;for(;n<=a;n++){const e=u[n];s+=e*e}return s}for(let e=0;e<h;e++){const t=m(e),n=u[e]*Math.pow(i+d*t,-c);f[e]=n}return a.makeTensorInfo(o.shape,o.dtype,f)}};const Co={kernelName:rt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o,y:r,dy:i}=n,{depthRadius:d,bias:c,alpha:l,beta:p}=s;cn(i,"LRNGrad");const u=e.sizeFromShape(i.shape),h=i.shape[3],f=a.data.get(i.dataId).values,m=a.data.get(o.dataId).values,k=a.data.get(r.dataId).values,I=new Float32Array(u),g=u;for(let e=0;e<g;e++){const t=e%h,n=e-t+Math.max(0,t-d),a=e-t+Math.min(h,t+d+1);let s=0;for(let e=n;e<a;e++)s+=Math.pow(m[e],2);s=l*s+c;for(let t=n;t<a;t++){let n=-2*l*p*m[t]*k[e]/s;e===t&&(n+=Math.pow(s,-p)),n*=f[e],I[t]+=n}}return a.makeTensorInfo(i.shape,o.dtype,I)}};function Po(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{reductionIndices:i,keepDims:d}=s,c=a;let l=o.shape;const p=l.length,u=e.parseAxisParam(i,l);let h=u;const f=r.getAxesPermutation(h,p);let m=c.data.get(o.dataId).values;if(null!=f){const e=new Array(p);for(let t=0;t<e.length;t++)e[t]=l[f[t]];m=pa(m,l,o.dtype,f,e),h=r.getInnerMostAxes(h.length,p),l=e}cn(o,"max"),r.assertAxesAreInnerMostDims("max",h,p);const[k,I]=r.computeOutAndReduceShapes(l,h),g=Qn(m,e.sizeFromShape(I),k,o.dtype),b=c.write(g,k,o.dtype);let y=k;if(d){y=r.expandShapeToKeepDim(k,u)}return{dataId:b,shape:y,dtype:o.dtype}}const Ro={kernelName:it,backendName:"cpu",kernelFunc:Po};const $o={kernelName:dt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n;cn(o,"maxPool");const{filterSize:i,strides:d,pad:c,dimRoundingMode:l}=s;e.assert(r.eitherStridesOrDilationsAreOne(d,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${d} and dilations '1'`);const p=r.computePool2DInfo(o.shape,i,d,1,c,l);let u;if(1===p.filterWidth&&1===p.filterHeight&&e.arraysEqual(p.inShape,p.outShape))u=gn({inputs:{x:o},backend:a});else{const t=a.data.get(o.dataId).values,n=e.computeStrides(o.shape),s=ps(t,o.shape,o.dtype,n,p,"max");u=a.makeTensorInfo(p.outShape,o.dtype,s.values)}return u}};const Oo={kernelName:ct,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{filterSize:i,strides:d,pad:c,dimRoundingMode:l,dataFormat:p}=s;cn(o,"maxPool3d");const u=r.computePool3DInfo(o.shape,i,d,1,c,l,p),h=hs(a.data.get(o.dataId).values,o.shape,o.dtype,e.computeStrides(o.shape),u,"max");return a.makeTensorInfo(h.shape,"float32",h.values)}};const Vo={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:s,input:o}=t,{filterSize:d,strides:c,pad:l,dimRoundingMode:p}=a;cn([s,o],"maxPool3DGrad");const u=r.computePool3DInfo(o.shape,d,c,1,l,p),h=function(e,t){const n=i(t.outShape,"int32"),a=t.strideDepth,s=t.strideHeight,o=t.strideWidth,r=t.dilationDepth,d=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,p=t.effectiveFilterHeight,u=t.effectiveFilterWidth,h=t.padInfo.front,f=t.padInfo.top,m=t.padInfo.left;for(let i=0;i<t.batchSize;++i)for(let k=0;k<t.inChannels;++k)for(let I=0;I<t.outDepth;++I){const g=I*a-h;let b=g;for(;b<0;)b+=r;const y=Math.min(t.inDepth,l+g);for(let a=0;a<t.outHeight;++a){const l=a*s-f;let h=l;for(;h<0;)h+=d;const N=Math.min(t.inHeight,p+l);for(let s=0;s<t.outWidth;++s){const f=s*o-m;let x=f;for(;x<0;)x+=c;const T=Math.min(t.inWidth,u+f);let S=Number.NEGATIVE_INFINITY,F=-1;for(let t=b;t<y;t+=r){const n=t-g;for(let a=h;a<N;a+=d){const s=a-l;for(let o=x;o<T;o+=c){const r=o-f,d=e.get(i,t,a,o,k);d>=S&&(S=d,F=n*p*u+s*p+r)}}}n.set(F,i,I,a,s,k)}}}return n}(n.bufferSync(o),u),f=u.strideDepth,m=u.strideHeight,k=u.strideWidth,I=u.dilationDepth,g=u.dilationHeight,b=u.dilationWidth,y=u.effectiveFilterDepth,N=u.effectiveFilterHeight,x=u.effectiveFilterWidth,T=y-1-u.padInfo.front,S=x-1-u.padInfo.left,F=N-1-u.padInfo.top,v=i(o.shape,"float32"),M=n.bufferSync(s);for(let e=0;e<u.batchSize;++e)for(let t=0;t<u.inChannels;++t)for(let n=0;n<u.inDepth;++n)for(let a=0;a<u.inHeight;++a)for(let s=0;s<u.inWidth;++s){const o=n-T,r=a-F,i=s-S;let d=0;for(let n=0;n<y;n+=I){const a=(o+n)/f;if(!(a<0||a>=u.outDepth||Math.floor(a)!==a))for(let s=0;s<N;s+=g){const o=(r+s)/m;if(!(o<0||o>=u.outHeight||Math.floor(o)!==o))for(let r=0;r<x;r+=b){const c=(i+r)/k;if(c<0||c>=u.outWidth||Math.floor(c)!==c)continue;const l=y*N*x-1-h.get(e,a,o,c,t)===n*N*x+s*x+r?1:0;if(0===l)continue;d+=M.get(e,a,o,c,t)*l}}}v.set(d,e,n,a,s,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const _o={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:s,input:o,output:d}=t,c=o;cn([o,d],"maxPoolGrad");const{filterSize:l,strides:p,pad:u,dimRoundingMode:h}=a,f=r.computePool2DInfo(c.shape,l,p,1,u,h),m=n.data.get(c.dataId).values,k=i(f.outShape,c.dtype,us(m,c.shape,c.dtype,f).values),I=f.strideHeight,g=f.strideWidth,b=f.dilationHeight,y=f.dilationWidth,N=f.effectiveFilterHeight,x=f.effectiveFilterWidth,T=x-1-f.padInfo.left,S=N-1-f.padInfo.top,F=i(c.shape,"float32"),v=n.data.get(s.dataId).values,M=i(s.shape,"float32",v);for(let e=0;e<f.batchSize;++e)for(let t=0;t<f.inChannels;++t)for(let n=0;n<f.inHeight;++n)for(let a=0;a<f.inWidth;++a){const s=n-S,o=a-T;let r=0;for(let n=0;n<N;n+=b){const a=(s+n)/I;if(!(a<0||a>=f.outHeight||Math.floor(a)!==a))for(let s=0;s<x;s+=y){const i=(o+s)/g;if(i<0||i>=f.outWidth||Math.floor(i)!==i)continue;const d=N*x-1-k.get(e,a,i,t)===n*x+s?1:0;if(0===d)continue;r+=M.get(e,a,i,t)*d}}F.set(r,e,n,a,t)}return n.makeTensorInfo(F.shape,F.dtype,F.values)}};const Bo={kernelName:ut,backendName:"cpu",kernelFunc:({inputs:t,attrs:n,backend:a})=>{const{x:s}=t,{filterSize:o,strides:i,pad:d,includeBatchInIndex:c}=n,l=a;cn(s,"MaxPoolWithArgmax");const p=l.data.get(s.dataId).values,u=r.computePool2DInfo(s.shape,o,i,[1,1],d),[h,f]=function(t,n,a,s,o){const r=ps(t,0,a,e.computeStrides(n),o,"max"),i=us(t,n,a,o,!0,s);return[r.values,i.values]}(p,s.shape,s.dtype,c,u),m=l.write(h,u.outShape,s.dtype),k=l.write(f,u.outShape,s.dtype);return[{dataId:m,shape:u.outShape,dtype:s.dtype},{dataId:k,shape:u.outShape,dtype:"int32"}]}};const Lo={kernelName:ht,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{axis:i,keepDims:d}=s,c=e.parseAxisParam(i,o.shape),l=r.computeOutAndReduceShapes(o.shape,c)[1],p=e.sizeFromShape(l),u=[],h=a.makeTensorInfo([],"float32",new Float32Array([p]));u.push(h);const f=xn({inputs:{x:o},backend:a,attrs:{dtype:"float32"}});u.push(f);const m=lo({inputs:{a:f,b:h},backend:a});u.push(m);const k=js({inputs:{x:m},backend:a,attrs:{axis:i,keepDims:d}});return u.forEach(e=>a.disposeIntermediateTensorInfo(e)),k}};const qo={kernelName:ft,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{axis:i,keepDims:d}=s;cn(o,"min");const c=e.parseAxisParam(i,o.shape);let l=c;const p=r.getAxesPermutation(l,o.shape.length);let u=o;null!=p&&(u=ua({inputs:{x:o},backend:a,attrs:{perm:p}}),l=r.getInnerMostAxes(l.length,o.shape.length)),r.assertAxesAreInnerMostDims("min",l,u.shape.length);const[h,f]=r.computeOutAndReduceShapes(u.shape,l),m=e.sizeFromShape(f),k=e.makeZerosTypedArray(e.sizeFromShape(h),u.dtype),I=a.data.get(u.dataId).values;for(let e=0;e<k.length;++e){const t=e*m;let n=I[t];for(let e=0;e<m;++e){const a=I[t+e];a<n&&(n=a)}k[e]=n}null!=p&&a.disposeIntermediateTensorInfo(u);const g=a.makeTensorInfo(h,u.dtype,k);if(d){const e=ja({inputs:{x:g},backend:a,attrs:{shape:r.expandShapeToKeepDim(h,c)}});return a.disposeIntermediateTensorInfo(g),e}return g}};const Go={kernelName:mt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{paddings:r,mode:i}=s;cn(o,"mirrorPad");const d=r.map((e,t)=>e[0]+o.shape[t]+e[1]),c=r.map(e=>e[0]),l=r.map((e,t)=>e[0]+o.shape[t]),p="reflect"===i?0:1,u=a.data.get(o.dataId).values,h=o.shape.length,f=e.computeStrides(o.shape),m=e.sizeFromShape(d),k=d.length,I=e.computeStrides(d),g=e.getTypedArrayFromDType(o.dtype,m);for(let t=0;t<m;t++){let n=e.indexToLoc(t,k,I);for(let e=0;e<k;e++)n[e]<c[e]?n[e]=2*c[e]-n[e]-p:n[e]>=l[e]&&(n[e]=2*(l[e]-1)-n[e]+p);n=n.map((e,t)=>e-c[t]);const a=e.locToIndex(n,h,f);g[t]=u[a]}return{dataId:a.write(g,d,o.dtype),shape:d,dtype:o.dtype}}},Uo={kernelName:kt,backendName:"cpu",kernelFunc:Sn(kt,fn((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}))};function Zo(t){const{inputs:n,backend:a,attrs:s}=t,{logits:o}=n,{dim:i}=s,d=o.shape.length;let c=i;if(-1===c&&(c=d-1),c!==d-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${d} and dim was ${c}`);const l=e.parseAxisParam([c],o.shape),p=Po({inputs:{x:o},backend:a,attrs:{reductionIndices:l,keepDims:!1}}),u=r.expandShapeToKeepDim(p.shape,l),h=ja({inputs:{x:p},backend:a,attrs:{shape:u}}),f=Ma({inputs:{a:o,b:h},backend:a}),m=$n({inputs:{x:f},backend:a}),k=js({inputs:{x:m},backend:a,attrs:{axis:l,keepDims:!1}}),I=ja({inputs:{x:k},backend:a,attrs:{shape:u}}),g=lo({inputs:{a:m,b:I},backend:a});return a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(m),a.disposeIntermediateTensorInfo(k),a.disposeIntermediateTensorInfo(I),g}const jo={kernelName:It,backendName:"cpu",kernelFunc:Zo};const Ko={kernelName:gt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{logits:o}=n,{numSamples:r,seed:i,normalized:d}=s;cn(o,"multinomial");const c=d?o:Zo({inputs:{logits:o},backend:a,attrs:{dim:-1}}),l=c.shape[0],p=c.shape[1],u=a.data.get(c.dataId).values,h=[l,r],f=e.makeZerosTypedArray(e.sizeFromShape(h),"int32");for(let e=0;e<l;++e){const t=e*p,n=new Float32Array(p-1);n[0]=u[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+u[t+e];const a=dn(i.toString()),s=e*r;for(let e=0;e<r;++e){const t=a();f[s+e]=n.length;for(let a=0;a<n.length;a++)if(t<n[a]){f[s+e]=a;break}}}return d||a.disposeIntermediateTensorInfo(c),a.makeTensorInfo(h,"int32",f)}},Yo=t.nonMaxSuppressionV3Impl;const Jo={kernelName:bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{boxes:s,scores:o}=t,{maxOutputSize:r,iouThreshold:i,scoreThreshold:d}=a;cn(s,"NonMaxSuppression");const c=n.data.get(s.dataId).values,l=n.data.get(o.dataId).values,{selectedIndices:p}=Yo(c,l,r,i,d);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Qo=t.nonMaxSuppressionV4Impl;const Xo={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{boxes:s,scores:o}=t,{maxOutputSize:r,iouThreshold:i,scoreThreshold:d,padToMaxOutputSize:c}=a;cn(s,"NonMaxSuppressionPadded");const l=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,{selectedIndices:u,validOutputs:h}=Qo(l,p,r,i,d,c);return[n.makeTensorInfo([u.length],"int32",new Int32Array(u)),n.makeTensorInfo([],"int32",new Int32Array([h]))]}},er=t.nonMaxSuppressionV5Impl;const tr={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{boxes:s,scores:o}=t,{maxOutputSize:r,iouThreshold:i,scoreThreshold:d,softNmsSigma:c}=a;cn(s,"NonMaxSuppressionWithScore");const l=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,u=r,h=i,f=d,m=c,{selectedIndices:k,selectedScores:I}=er(l,p,u,h,f,m);return[n.makeTensorInfo([k.length],"int32",new Int32Array(k)),n.makeTensorInfo([I.length],"float32",new Float32Array(I))]}};const nr={kernelName:xt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{indices:o}=n,{depth:r,onValue:i,offValue:d}=s;cn(o,"oneHot");const c=e.sizeFromShape(o.shape),l=new Float32Array(c*r);l.fill(d);const p=a.data.get(o.dataId).values;for(let e=0;e<c;++e)p[e]>=0&&p[e]<r&&(l[e*r+p[e]]=i);return a.makeTensorInfo([...o.shape,r],"int32",l)}};function ar(e){const{inputs:t,backend:n}=e,{x:a}=t;if("string"===a.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===a.dtype){const e=yn({inputs:{input:a},backend:n}),t=ar({inputs:{x:e},backend:n}),s=Ts({inputs:{input:a},backend:n}),o=ar({inputs:{x:s},backend:n}),r=mn({inputs:{real:t,imag:o},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),r}return mo({backend:n,attrs:{shape:a.shape,value:0,dtype:a.dtype}})}const sr={kernelName:Tt,backendName:"cpu",kernelFunc:ar};const or={kernelName:St,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:a}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=yn({inputs:{input:s},backend:a}),n=e({inputs:{x:t},backend:a}),o=Ts({inputs:{input:s},backend:a}),r=ar({inputs:{x:o},backend:a}),i=mn({inputs:{real:n,imag:r},backend:a});return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(o),a.disposeIntermediateTensorInfo(r),i}return mo({backend:a,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function rr(t){const{inputs:n,backend:a,attrs:s}=t,{axis:o}=s;if(1===n.length)return io({inputs:{input:n[0]},backend:a,attrs:{dim:o}});const r=n[0].shape,i=n[0].dtype;n.forEach(t=>{e.assertShapesMatch(r,t.shape,"All tensors passed to stack must have matching shapes"),e.assert(i===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const d=[],c=Fs({inputs:n.map(e=>{const t=io({inputs:{input:e},backend:a,attrs:{dim:o}});return d.push(t),t}),backend:a,attrs:{axis:o}});return d.forEach(e=>a.disposeIntermediateTensorInfo(e)),c}const ir={kernelName:Ft,backendName:"cpu",kernelFunc:rr};const dr={kernelName:vt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{paddings:r,constantValue:i}=s;cn(o,"pad");const d=r.map((e,t)=>e[0]+o.shape[t]+e[1]),c=r.map(e=>e[0]),l=a.data.get(o.dataId).values,p=e.sizeFromShape(o.shape),u=o.shape.length,h=e.computeStrides(o.shape),f=e.sizeFromShape(d),m=d.length,k=e.computeStrides(d),I=e.getTypedArrayFromDType(o.dtype,f);0!==i&&I.fill(i);for(let t=0;t<p;t++){const n=e.indexToLoc(t,u,h).map((e,t)=>e+c[t]);I[e.locToIndex(n,m,k)]=l[t]}return{dataId:a.write(I,d,o.dtype),shape:d,dtype:o.dtype}}},cr={kernelName:Mt,backendName:"cpu",kernelFunc:Sn(Mt,fn((e,t)=>Math.pow(e,t)))};const lr={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:a,stop:s,dtype:o,step:r}=n,i=ka(a,s,r,o);return t.makeTensorInfo([i.length],o,i)}},pr={kernelName:wt,backendName:"cpu",kernelFunc:Wn(wt,e=>1/e)};const ur={kernelName:zt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{images:o}=n,{alignCorners:r,halfPixelCenters:i,size:d}=s;cn(o,"resizeBilinear");const c=e.computeStrides(o.shape),[l,p]=d,[u,h,f,m]=o.shape,k=a.data.get(o.dataId).values,I=new Float32Array(e.sizeFromShape([u,l,p,m])),g=[r&&l>1?h-1:h,r&&p>1?f-1:f],b=[r&&l>1?l-1:l,r&&p>1?p-1:p];let y=0;const N=g[0]/b[0],x=g[1]/b[1];for(let e=0;e<u;e++)for(let t=0;t<l;t++){let n;n=i?N*(t+.5)-.5:N*t;const a=Math.max(0,Math.floor(n)),s=n-a,o=Math.min(h-1,Math.ceil(n)),r=e*c[0]+a*c[1],d=e*c[0]+o*c[1];for(let e=0;e<p;e++){let t;t=i?x*(e+.5)-.5:x*e;const n=Math.max(0,Math.floor(t)),a=t-n,o=Math.min(f-1,Math.ceil(t)),l=r+n*c[2],p=d+n*c[2],u=r+o*c[2],h=d+o*c[2];for(let e=0;e<m;e++){const t=k[l+e],n=k[p+e],o=t+(k[u+e]-t)*a,r=o+(n+(k[h+e]-n)*a-o)*s;I[y++]=r}}}return a.makeTensorInfo([u,l,p,m],"float32",I)}};const hr={kernelName:Dt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{images:o,dy:r}=n,{alignCorners:i}=s;cn([r,o],"resizeBilinearGrad");const d=e.computeStrides(o.shape),[c,l,p,u]=o.shape,[,h,f]=r.shape,m=new Float32Array(c*l*p*u),k=[i&&h>1?l-1:l,i&&f>1?p-1:p],I=[i&&h>1?h-1:h,i&&f>1?f-1:f],g=k[0]/I[0],b=k[1]/I[1],y=a.data.get(r.dataId).values;let N=0;for(let e=0;e<c;e++){const t=e*d[0];for(let e=0;e<h;e++){const n=e*g,a=Math.floor(n),s=Math.min(Math.ceil(n),l-1),o=t+a*d[1],r=t+s*d[1],i=n-a,c=1-i;for(let e=0;e<f;e++){const t=e*b,n=Math.floor(t),a=Math.min(Math.ceil(t),p-1),s=t-n,l=1-s,h=o+n*d[2],f=o+a*d[2],k=r+n*d[2],I=r+a*d[2],g=c*l,x=c*s,T=i*l,S=i*s;for(let e=0;e<u;e++){const t=y[N++];m[h+e]+=t*g,m[f+e]+=t*x,m[k+e]+=t*T,m[I+e]+=t*S}}}}return a.makeTensorInfo([c,p,l,u],"float32",m)}};const fr={kernelName:Wt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{images:o}=n,{alignCorners:r,halfPixelCenters:i,size:d}=s;cn(o,"resizeNearestNeighbor");const c=e.computeStrides(o.shape),[l,p]=d,[u,h,f,m]=o.shape,k=a.data.get(o.dataId).values,I=new Float32Array(u*l*p*m),g=[r&&l>1?h-1:h,r&&p>1?f-1:f],b=[r&&l>1?l-1:l,r&&p>1?p-1:p],y=g[0]/b[0],N=g[1]/b[1];let x=0;for(let e=0;e<u;e++){const t=e*c[0];for(let e=0;e<l;e++){const n=i?y*(e+.5):y*e;let a=Math.min(h-1,r?Math.round(n):Math.floor(n));i&&(a=Math.max(0,a));const s=t+a*c[1];for(let e=0;e<p;e++){const t=i?N*(e+.5):N*e;let n=Math.min(f-1,r?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const a=s+n*c[2];for(let e=0;e<m;e++){const t=k[a+e];I[x++]=t}}}}return a.makeTensorInfo([u,l,p,m],o.dtype,I)}};const mr={kernelName:Ht,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{images:o,dy:r}=n,{alignCorners:i}=s;cn([r,o],"resizeNearestNeighborGrad");const d=e.computeStrides(o.shape),c=e.computeStrides(r.shape),[l,p,u,h]=o.shape,[,f,m]=r.shape,k=new Float32Array(l*p*u*h),I=a.data.get(r.dataId).values,g=[i&&f>1?p-1:p,i&&m>1?u-1:u],b=[i&&f>1?f-1:f,i&&m>1?m-1:m],y=g[0]/b[0],N=g[1]/b[1],x=1/y,T=1/N,S=2*Math.ceil(x)+2,F=2*Math.ceil(T)+2;for(let e=0;e<l;e++){const t=e*d[0];for(let e=0;e<p;e++){const n=t+e*d[1],a=Math.floor(e*x),s=Math.floor(a-S/2);for(let a=0;a<u;a++){const o=n+a*d[2],r=Math.floor(a*T),l=Math.floor(r-F/2);for(let n=0;n<h;n++){let r=0;for(let o=0;o<S;o++){const d=o+s;if(d<0||d>=f)continue;const h=t+d*c[1],k=d*y;if(e===Math.min(p-1,i?Math.round(k):Math.floor(k)))for(let e=0;e<F;e++){const t=e+l;if(t<0||t>=m)continue;const s=h+t*c[2],o=t*N;a===Math.min(u-1,i?Math.round(o):Math.floor(o))&&(r+=I[s+n])}}k[o+n]=r}}}}return a.makeTensorInfo(o.shape,o.dtype,k)}};const kr={kernelName:Et,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{dims:r}=s;cn(o,"reverse");const i=o.shape.length,d=e.parseAxisParam(r,o.shape);if(0===i)return gn({inputs:{x:o},backend:a});const c=new E(o.shape,o.dtype),l=a.bufferSync(o);for(let e=0;e<c.size;e++){const t=c.indexToLoc(e),n=t.slice();d.forEach(e=>n[e]=o.shape[e]-1-n[e]),c.set(l.get(...n),...t)}return a.makeTensorInfo(c.shape,c.dtype,c.values)}},Ir={kernelName:Ct,backendName:"cpu",kernelFunc:({inputs:t,attrs:n,backend:a})=>{const{image:s}=t,{radians:o,fillValue:i,center:d}=n,c=a,l=e.getTypedArrayFromDType(s.dtype,e.sizeFromShape(s.shape)),[p,u,h,f]=s.shape,[m,k]=r.getImageCenter(d,u,h),I=Math.sin(o),g=Math.cos(o),b=c.data.get(s.dataId).values;for(let e=0;e<p;e++){const t=e*h*u*f;for(let e=0;e<u;e++){const n=e*(h*f);for(let a=0;a<h;a++){const s=a*f;for(let o=0;o<f;o++){const r=[p,e,a,o],d=r[2],c=r[1];let y=(d-m)*g-(c-k)*I,N=(d-m)*I+(c-k)*g;y=Math.round(y+m),N=Math.round(N+k);let x=i;if("number"!=typeof i&&(x=3===o?255:i[o]),y>=0&&y<h&&N>=0&&N<u){x=b[t+N*(h*f)+y*f+o]}l[t+n+s+o]=x}}}}return{dataId:c.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},gr={kernelName:Pt,backendName:"cpu",kernelFunc:Wn(Pt,e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})};function br(e,t,n,a,s,o,r,d,c,l){const p=[a/s,s],u=e.values,h=t.values;if(0===a)return i(n,t.dtype);const f=i(p,t.dtype);f.values.fill(c);for(let e=0;e<o;e++){const o=[];let i=0;for(let t=0;t<r;t++){const n=u[e*r+t];o.push(n),i+=n*d[t]}if(i<0||i>=a/s)throw new Error(`Invalid indices: ${o} does not index into ${n}`);for(let n=0;n<s;n++)l?f.values[i*s+n]+=h[e*s+n]:f.values[i*s+n]=0===t.rank?h[0]:h[e*s+n]}return f}const yr={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:s,updates:o}=t,{shape:i}=a,{sliceRank:d,numUpdates:c,sliceSize:l,strides:p,outputSize:u}=r.calculateShapes(o,s,i),h=br(n.bufferSync(s),n.bufferSync(o),i,u,l,c,d,p,0,!0);return n.makeTensorInfo(i,h.dtype,h.values)}};const Nr={kernelName:$t,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a}=t,{condition:s,t:o,e:r}=n;cn([s,o,r],"select");const i=s.shape.length,d=a.data.get(s.dataId).values,c=a.data.get(o.dataId).values,l=a.data.get(r.dataId).values,p=M(o.dtype,r.dtype),u=e.makeZerosTypedArray(e.sizeFromShape(o.shape),p);let h=0;const f=0===i||i>1||1===o.shape.length?1:e.sizeFromShape(o.shape.slice(1));for(let e=0;e<d.length;e++)for(let t=0;t<f;t++)1===d[e]?u[h++]=c[e]:u[h++]=l[e];return a.makeTensorInfo(o.shape,p,u)}},xr=r.SELU_SCALEALPHA,Tr=r.SELU_SCALE,Sr={kernelName:Ot,backendName:"cpu",kernelFunc:Wn(Ot,e=>e>=0?Tr*e:xr*(Math.exp(e)-1))},Fr={kernelName:Vt,backendName:"cpu",kernelFunc:Wn(Vt,e=>e<0?-1:e>0?1:0)},vr={kernelName:_t,backendName:"cpu",kernelFunc:Wn(_t,e=>Math.sin(e))},Mr={kernelName:Bt,backendName:"cpu",kernelFunc:Wn(Bt,e=>Math.sinh(e))},Ar=Math.log(1.1920928955078125e-7)+2,wr={kernelName:Lt,backendName:"cpu",kernelFunc:Wn(Lt,e=>{const t=e>-Ar,n=e<Ar,a=Math.exp(e);let s;return s=n?a:t?e:Math.log(1+a),s})};const zr={kernelName:qt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{blockShape:i,paddings:d}=s;cn([o],"spaceToBatchND");const c=e.sizeFromShape(i),l=[[0,0]];l.push(...d);for(let e=1+i.length;e<o.shape.length;++e)l.push([0,0]);const p=dr.kernelFunc({inputs:{x:o},backend:a,attrs:{paddings:l,constantValue:0}}),u=r.getReshaped(p.shape,i,c,!1),h=r.getPermuted(u.length,i.length,!1),f=r.getReshapedPermuted(p.shape,i,c,!1),m=ja({inputs:{x:p},backend:a,attrs:{shape:u}}),k=ua({inputs:{x:m},backend:a,attrs:{perm:h}}),I=ja({inputs:{x:k},backend:a,attrs:{shape:f}});return a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(m),a.disposeIntermediateTensorInfo(k),I}};const Dr={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:a,inputShape:s,newShape:o}=t;if(2!==a.shape.length)throw new Error("Input indices should be a matrix but received shape\n        "+a.shape);if(1!==s.shape.length)throw new Error("Input shape should be a vector but received shape\n        "+s.shape);if(1!==o.shape.length)throw new Error("Target shape should be a vector but received shape "+o.shape);const r=Array.from(n.data.get(s.dataId).values),i=n.data.get(a.dataId).values,d=Array.from(n.data.get(o.dataId).values),[c,l,p]=xa(i,a.shape,a.dtype,r,d);return[n.makeTensorInfo(l,a.dtype,c),n.makeTensorInfo([p.length],o.dtype,new Int32Array(p))]}};const Wr={kernelName:Ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:s,sparseValues:o,defaultValue:i}=t,{outputShape:d}=a,{sliceRank:c,numUpdates:l,sliceSize:p,strides:u,outputSize:h}=r.calculateShapes(o,s,d),f=br(n.bufferSync(s),n.bufferSync(o),d,h,p,l,c,u,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(d,f.dtype,f.values)}};const Hr={kernelName:Zt,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o}=n,{numOrSizeSplits:i,axis:d}=s,c=e.parseAxisParam(d,o.shape)[0],l=r.prepareSplitSize(o,i,c),p=new Array(o.shape.length).fill(0),u=o.shape.slice();return l.map(e=>{const t=[...u];t[c]=e;const n=ya({inputs:{x:o},backend:a,attrs:{begin:p,size:t}});return p[c]+=e,n})}},Er={kernelName:jt,backendName:"cpu",kernelFunc:Wn(jt,e=>Math.sqrt(e))},Cr={kernelName:Kt,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,a=t;cn(n,"square");const s=a.data.get(n.dataId).values,o=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];o[e]=t*t}return{dataId:a.write(o,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Pr={kernelName:Yt,backendName:"cpu",kernelFunc:Wn(Yt,(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})};const Rr={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{begin:o,end:r,strides:i,beginMask:d,endMask:c,ellipsisMask:l,newAxisMask:p,shrinkAxisMask:u}=a;cn(s,"stridedSlice");const{nonStrided:h,$begin:f,$strides:m,size:k,newShape:I,outShape:g}=z.sliceInfo(s.shape,o,r,i,d,c,l,p,u),b=ja({inputs:{x:s},backend:n,attrs:{shape:I}});let y;if(h){const e=ya({inputs:{x:b},backend:n,attrs:{begin:f,size:k}});y=ja({inputs:{x:e},backend:n,attrs:{shape:g}}),n.disposeIntermediateTensorInfo(e)}else if(g.some(e=>0===e))y=n.makeTensorInfo(g,s.dtype,[]);else{const e=Fa(g,n.bufferSync(b),m,f);y=n.makeTensorInfo(e.shape,e.dtype,e.values)}const N=ja({inputs:{x:y},backend:n,attrs:{shape:g}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(y),N}},$r={kernelName:Qt,backendName:"cpu",kernelFunc:Wn(Qt,e=>Math.tan(e))},Or=Wn(Xt,e=>Math.tanh(e));function Vr(t,n,a){switch(a){case"reflect":return function(t,n){let a=t;if(a<0)if(n<=1)a=0;else{const e=2*n;a<e&&(a=e*Math.trunc(-a/e)+a),a=a<-n?a+e:-a-1}else if(a>n-1)if(n<=1)a=0;else{const e=2*n;a-=e*Math.trunc(a/e),a>=n&&(a=e-a-1)}return e.clamp(0,a,n-1)}(t,n);case"wrap":return function(t,n){let a=t;if(a<0)if(n<=1)a=0;else{const e=n-1;a+=n*(Math.trunc(-a/e)+1)}else if(a>n-1)if(n<=1)a=0;else{const e=n-1;a-=n*Math.trunc(a/e)}return e.clamp(0,a,n-1)}(t,n);case"nearest":return function(t,n){return e.clamp(0,t,n-1)}(t,n);case"constant":default:return function(e,t){return e}(t)}}function _r(e,t,n,a,s,o,r,i,d,c,l){return 0<=i&&i<t&&0<=d&&d<n?e[r*a+i*s+d*o+c]:l}function Br(e,t,n,a,s,o,r,i,d,c,l){return _r(e,t,n,a,s,o,r,Math.round(i),Math.round(d),c,l)}function Lr(e,t,n,a,s,o,r,i,d,c,l){const p=Math.floor(i),u=Math.floor(d),h=p+1,f=u+1;return(h-i)*((f-d)*_r(e,t,n,a,s,o,r,p,u,c,l)+(d-u)*_r(e,t,n,a,s,o,r,p,f,c,l))+(i-p)*((f-d)*_r(e,t,n,a,s,o,r,h,u,c,l)+(d-u)*_r(e,t,n,a,s,o,r,h,f,c,l))}const qr=[Qa,hn,Xa,es,An,ts,ns,as,ss,os,rs,is,ds,cs,ls,fs,ms,ks,Is,Ja,gs,bs,ys,Tn,Cn,Ns,kn,xs,vs,ws,zs,As,Ws,Hs,Ds,Es,Cs,Ps,Rs,$s,Os,_s,Bs,Ls,qs,Gs,Zs,Us,po,Ys,Ca,Js,Xs,ro,On,co,_n,fo,ko,Io,Ln,go,bo,yo,No,xo,Un,To,bn,So,Ss,Fo,vo,Mo,Ra,jn,Ao,wo,Jn,zo,Do,Wo,Ho,Eo,Co,ea,$o,Oo,Vo,_o,Bo,Ro,Lo,qo,na,Go,Uo,Ko,ra,da,Jo,Xo,tr,la,nr,or,ir,dr,cr,Va,ma,lr,Nn,pr,Ba,qa,Ka,ur,hr,fr,mr,kr,Ir,gr,ga,yr,Nr,Sr,Ua,Fr,vr,Mr,Na,jo,wr,zr,Dr,Wr,Hr,Er,Cr,Sa,Pr,Rr,Aa,Ks,$r,{kernelName:Xt,backendName:"cpu",kernelFunc:Or},{kernelName:en,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{reps:o}=a;cn(s,"tile");const r=wa(n.bufferSync(s),o);return n.makeTensorInfo(r.shape,r.dtype,r.values)}},{kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{k:o,sorted:r}=a;cn(s,"topk");const i=n.data.get(s.dataId).values,[d,c]=za(i,s.shape,s.dtype,o);return[n.makeTensorInfo(d.shape,d.dtype,d.values),n.makeTensorInfo(c.shape,c.dtype,c.values)]}},ha,{kernelName:nn,backendName:"cpu",kernelFunc:function(t){const{inputs:n,attrs:a,backend:s}=t,{image:o,transforms:r}=n,{interpolation:i,fillMode:d,fillValue:c,outputShape:l}=a,[p,u,h,f]=o.shape,[m,k]=null!=l?l:[u,h],I=[p,m,k,f],g=e.computeStrides(o.shape),b=g[0],y=g[1],N=g[2],x=e.getTypedArrayFromDType(o.dtype,e.sizeFromShape(I));x.fill(c);const T=s.data.get(o.dataId).values,S=s.data.get(r.dataId).values;for(let e=0;e<p;++e){const t=1===r.shape[0]?S:S.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let a=0;a<k;++a)for(let s=0;s<f;++s){let o;const r=t[6]*a+t[7]*n+1;if(0===r)continue;const l=(t[0]*a+t[1]*n+t[2])/r,p=(t[3]*a+t[4]*n+t[5])/r,f=Vr(l,h,d),m=Vr(p,u,d);switch(i){case"nearest":o=Br(T,u,h,b,y,N,e,m,f,s,c);break;case"bilinear":o=Lr(T,u,h,b,y,N,e,m,f,s,c);break;default:throw new Error("Error in Transform: Expect 'nearest' or 'bilinear', but got "+i)}x[e*b+n*y+a*N+s]=o}return s.makeTensorInfo(I,o.dtype,x)}return{dataId:s.write(x,I,o.dtype),shape:o.shape,dtype:o.dtype}}},{kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{axis:s}=n,{x:o}=t;cn(o,"unique");const r=a.data.get(o.dataId).values,{outputValues:i,outputShape:d,indices:c}=Da(r,s,o.shape,o.dtype);return[a.makeTensorInfo(d,o.dtype,i),a.makeTensorInfo([c.length],"int32",c)]}},{kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{value:s}=t;let{axis:o}=a;o<0&&(o+=s.shape.length);const r=s.shape.length,i=s.shape[o],d=new Array(r-1);let c=0;for(let e=0;e<r;e++)e!==o&&(d[c++]=s.shape[e]);const l=new Array(r).fill(0),p=s.shape.slice();p[o]=1;const u=new Array(i);for(let e=0;e<u.length;e++){l[o]=e;const t=ya({inputs:{x:s},backend:n,attrs:{begin:l,size:p}});u[e]=ja({inputs:{x:t},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(t)}return u}},{kernelName:on,backendName:"cpu",kernelFunc:function(t){const{inputs:n,backend:a,attrs:s}=t,{x:o,segmentIds:r}=n,{numSegments:i}=s;cn(o,"unsortedSegmentSum");const d=[],c=[],l=o.shape.length-r.shape.length;let p=r;for(let e=0;e<l;++e){const t=io({inputs:{input:p},backend:a,attrs:{dim:e+1}});p=t,c.push(t)}for(let t=0;t<i;++t){const n=e.createScalarValue(t,"int32"),s=a.makeTensorInfo([],"int32",n),r=Qs({inputs:{a:s,b:p},backend:a}),i=xn({inputs:{x:r},backend:a,attrs:{dtype:"float32"}}),l=oa({inputs:{a:i,b:o},backend:a}),u=js({inputs:{x:l},backend:a,attrs:{axis:0,keepDims:!1}});d.push(u),c.push(s),c.push(r),c.push(i),c.push(l),c.push(u)}const u=rr({inputs:d,backend:a,attrs:{axis:0}});return c.forEach(e=>a.disposeIntermediateTensorInfo(e)),u}},sr];for(const e of qr)rn(e);export{pn as MathBackendCPU,Wa as shared,Ha as version_cpu};
//# sourceMappingURL=tf-backend-cpu.fesm.min.js.map
