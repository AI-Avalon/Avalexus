{"version":3,"file":"tf-backend-cpu.fesm.min.js","sources":["../src/cpu_util.ts","../src/backend_cpu.ts","../src/kernels/Abs.ts","../src/utils/binary_impl.ts","../src/kernels/Complex.ts","../src/utils/zeros_impl.ts","../src/kernels/Identity.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/utils/binary_utils.ts","../src/kernels/Add.ts","../src/kernels/Bincount_impl.ts","../src/utils/unary_impl.ts","../src/utils/unary_utils.ts","../src/kernels/Ceil.ts","../src/kernels/Concat_impl.ts","../src/kernels/Exp.ts","../src/kernels/Expm1.ts","../src/kernels/Floor.ts","../src/kernels/GatherV2_impl.ts","../src/kernels/Greater.ts","../src/kernels/Less.ts","../src/kernels/LinSpace_impl.ts","../src/kernels/Log.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/Minimum.ts","../src/kernels/Multiply.ts","../src/kernels/Neg.ts","../src/kernels/NotEqual.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Transpose.ts","../src/kernels/Prod.ts","../src/kernels/Range_impl.ts","../src/kernels/Rsqrt.ts","../src/kernels/Slice.ts","../src/kernels/SparseReshape_impl.ts","../src/kernels/SquaredDifference.ts","../src/kernels/StridedSlice_impl.ts","../src/kernels/Sub.ts","../src/kernels/Tile_impl.ts","../src/kernels/TopK_impl.ts","../src/kernels/Unique_impl.ts","../src/version.ts","../src/base.ts","../src/kernels/Elu.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/kernels/Sigmoid.ts","../src/utils/fused_utils.ts","../src/kernels/Reshape.ts","../src/kernels/BatchMatMul.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/utils/pool_utils.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchNorm.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/Clip.ts","../src/kernels/ComplexAbs.ts","../src/kernels/Imag.ts","../src/kernels/Concat.ts","../src/kernels/Conv2D.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/kernels/CropAndResize.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/kernels/DepthToSpace.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/kernels/Diag.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/kernels/Sum.ts","../src/kernels/Einsum.ts","../src/kernels/EluGrad.ts","../src/kernels/Equal.ts","../src/kernels/Erf.ts","../src/kernels/ExpandDims.ts","../src/kernels/RealDiv.ts","../src/utils/fft_utils.ts","../src/kernels/FFT.ts","../src/kernels/Fill.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/FloorDiv.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/kernels/GatherNd.ts","../src/kernels/GatherV2.ts","../src/kernels/GreaterEqual.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/kernels/LRN.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Mean.ts","../src/kernels/Min.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/ResizeBilinear.ts","../src/kernels/ResizeBilinearGrad.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/kernels/Reverse.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Scatter_impl.ts","../src/kernels/ScatterNd.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseReshape.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/Step.ts","../src/kernels/StridedSlice.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/kernels/Transform.ts","../src/kernels/UnsortedSegmentSum.ts","../src/register_all_kernels.ts","../src/kernels/Tile.ts","../src/kernels/TopK.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: TypedArray,\n          bVals: TypedArray, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(`only one output dimension may be -1, not both ${\n            unknownIndex} and ${d}`);\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(`size ${d} must be non-negative, not ${size}`);\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          'reshape cannot infer the missing ' +\n          'input size for an empty tensor unless all ' +\n          'specified input sizes are non-zero');\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${\n          product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(`Input to reshape is a tensor with ${\n        denseSize} dense values, but the requested shape has ${\n        outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n  const diff = a - b;\n  return diff * diff;\n}));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.5.0';\nexport {version};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue, bValue));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const outBuf = buffer([numSlices, sliceSize], params.dtype);\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsData = backend.data.get(params.dataId).values as TypedArray;\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${params.shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsData[flattenIndex * sliceSize + k];\n    }\n  }\n\n  return backend.makeTensorInfo(resultShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\nexport const lRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\nexport const lRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => {\n  const rem = aValue % bValue;\n  if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n    return rem;\n  } else {\n    return (rem + bValue) % bValue;\n  }\n}));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const xBuf = backend.bufferSync($x);\n    const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchStride + outY * rowStride + outX * colStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lRNConfig} from './kernels/LRN';\nimport {lRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  realDivConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lRNConfig,\n  lRNGradConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseReshapeConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transposeConfig,\n  transformConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","[object Object]","super","this","data","DataStorage","engine","nextDataId","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","outId","length","isString","encodedValues","map","d","encodeString","write","has","numDataIds","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","decodeString","Error","buffer","makeTensorFromDataId","force","disposeData","delete","tensorInfo","f","start","now","kernelMs","unreliable","reasons","condition","condVals","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","makeOutput","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","makeTensorInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","incRef","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensorInfo","floatX","disposeIntermediateTensorInfo","realPart","hasEncodingLoss","Int32Array","from","xVals","zero","toTypedArray","resultData","resultShape","a","b","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","add","Add","addConfig","bincountImpl","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","ceilConfig","Ceil","concatImpl","outShape","simplyConcat","offset","colOffset","fromUint8ToStringArray","tIdx","row","resIdx","col","expImpl","exp","Exp","expConfig","expm1Impl","expm1","expm1Config","Expm1","floorImpl","floor","floorConfig","Floor","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greaterConfig","Greater","lessImpl","lessConfig","Less","linSpaceImpl","stop","num","step","logImpl","log","logConfig","Log","maxImpl","reduceSize","max","maximumImpl","aValue","bValue","maximumConfig","Maximum","minimumImpl","min","minimumConfig","Minimum","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqualConfig","NotEqual","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","push","getInnerMostAxes","expandShapeToKeepDim","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrtConfig","Rsqrt","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","subarray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","outputShape","product","unknownIndex","missing","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","squaredDifferenceImpl","diff","squaredDifferenceConfig","SquaredDifference","stridedSliceImpl","strides","subImpl","sub","Sub","subConfig","tileImpl","reps","rank","topKImpl","k","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","index","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","indices","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","n","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","outputValues","version","registerBackend","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","sigmoid","Sigmoid","sigmoidConfig","applyActivation","activation","preluActivationWeights","leakyreluAlpha","reshape","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acosConfig","Acos","acos","acoshConfig","Acosh","acosh","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asinConfig","Asin","asin","asinhConfig","Asinh","asinh","atanConfig","Atan","atan","atan2Config","Atan2","atan2","atanhConfig","Atanh","atanh","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","output","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","batchSize","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","isNaN","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","bufferSync","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","clipConfig","ClipByValue","clipAttrs","clipValueMax","clipValueMin","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","leftPad","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cosConfig","Cos","cos","coshConfig","Cosh","cosh","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","c","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumsumConfig","Cumsum","exclusive","reverse","permutedAxis","resultDtype","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2dConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","out","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","eluGradConfig","EluGrad","v","equal","Equal","equalConfig","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erfConfig","Erf","sign","dim","$dim","expandDimsConfig","ExpandDims","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","e","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","fill","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivConfig","FloorDiv","fusedConv2DConfig","FusedConv2D","resultOld","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","paramsSize","indicesShape","sliceRank","numSlices","prepareAndValidate","indicesData","paramsData","flattenIndex","gatherV2Config","GatherV2","batchDims","$batchDims","indicesSize","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFiniteConfig","IsFinite","isFinite","isInfConfig","IsInf","Infinity","isNaNConfig","IsNan","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","log1pConfig","Log1p","log1p","logicalAndConfig","LogicalAnd","logicalNotConfig","LogicalNot","logicalOrConfig","LogicalOr","lRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","pow","lRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","end","coords","inIndex","modConfig","Mod","rem","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom.alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powConfig","Pow","rangeConfig","Range","reciprocalConfig","Reciprocal","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","roundConfig","Round","base","scatterImpl","updates","numUpdates","defaultValue","sumDupeIndices","flattenShape","updatesData","scatterNdConfig","ScatterNd","calculateShapes","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","signConfig","Sign","sinConfig","Sin","sinhConfig","Sinh","sinh","threshold","softplusConfig","Softplus","tooLarge","tooSmall","expX","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","s","sliceT","sqrtConfig","Sqrt","squareConfig","Square","stepConfig","Step","stepAttrs","NaN","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliceInfo","sliced","some","tanConfig","Tan","tan","tanh","Tanh","mapCoord","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","batchStride","rowStride","colStride","nearestInterpolation","bilinearInterpolation","yFloor","xFloor","yCeil","xCeil","kernelConfigs","Tile","TopK","Transform","transforms","interpolation","fillMode","transformVals","transform","outY","outX","projection","inX","inY","Unique","Unpack","valueRank","outIndex","tempRes","UnsortedSegmentSum","segmentIds","numSegments","numIters","$segmentIds","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfig","registerKernel"],"mappings":"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EAyBvB,OAAQC,EAAQruB,KArBXsuB,EAAQr3C,GACL42C,GACIjnB,EAAWR,EAAaC,EAAYynB,EAAaC,EACjDC,EAAW5kC,EAAO+kC,EAAQC,EAAQj3B,EAASkwB,IAClDpwC,EAAIm3C,GACDP,GACIjnB,EAAWR,EAAaC,EAAYynB,EAAaC,EACjDC,EAAW5kC,EAAO+kC,EAAQG,EAAOn3B,EAASkwB,KAclBrnB,EAAImuB,KAVnCG,EAAQr3C,GACL42C,GACIjnB,EAAWR,EAAaC,EAAYynB,EAAaC,EACjDC,EAAW5kC,EAAOilC,EAAOD,EAAQj3B,EAASkwB,IACjDpwC,EAAIm3C,GACDP,GACIjnB,EAAWR,EAAaC,EAAYynB,EAAaC,EACjDC,EAAW5kC,EAAOilC,EAAOC,EAAOn3B,EAASkwB,ICpKhD,MCiGDkH,GAAgC,CACpCt+B,GACAtZ,GACA6Z,GACAG,GACAtT,GACAyT,GACAI,GACAQ,GACAG,GACAI,GACAG,GACAG,GACAG,GACAG,GACAG,GACAyF,GACAW,GACAI,GACAqB,GACA9K,GACAuL,GACAkB,GACAkB,GACAriB,GACA2D,GACA6e,GACApkB,GACAykB,GACAsB,GACAkC,GACAW,GACAb,GACAmC,GACAmB,GACA9B,GACAsC,GACAG,GACAG,GACA8C,GACAW,GACAE,GACAoB,GACAE,GACAG,GACAE,GACAE,GACA0B,GACAT,GACAiE,GACAjD,GACA9hB,GACAojB,GACAK,GACAa,GACA9vB,GACAmwB,GACAhwB,GACA+0B,GACAQ,GACAE,GACAr1B,GACA41B,GACAE,GACAG,GACAE,GACAW,GACAn2B,GACA+2B,GACAj+B,GACAm+B,GACA3Z,GACA6Z,GACAG,GACAG,GACAhtB,GACAtK,GACAw3B,GACAE,GACAl3B,GACAo3B,GACAG,GACAE,GACAE,GACAE,GACAY,GACAj4B,GACA64B,GACAE,GACAE,GACAK,GACAE,GACAb,GACAqB,GACAI,GACAh6B,GACAk6B,GACAO,GACAa,GACAh7B,GACAM,GACAy7B,GACAU,GACAK,GACAp8B,GACA48B,GACAU,GACAM,GACAE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"}